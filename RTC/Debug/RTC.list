
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002878  08002878  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002878  08002878  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002878  08002878  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  080028f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080028f0  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043af  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000133f  00000000  00000000  00024448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  00025788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004c8  00000000  00000000  00025d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016296  00000000  00000000  000261d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000063f8  00000000  00000000  0003c466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f9af  00000000  00000000  0004285e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c220d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f8  00000000  00000000  000c2260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080027d0 	.word	0x080027d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080027d0 	.word	0x080027d0

0800014c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);

int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af04      	add	r7, sp, #16

  HAL_Init();
 8000152:	f000 f9ed 	bl	8000530 <HAL_Init>

  SystemClock_Config();
 8000156:	f000 f839 	bl	80001cc <SystemClock_Config>

  MX_GPIO_Init();
 800015a:	f000 f8d5 	bl	8000308 <MX_GPIO_Init>
  MX_RTC_Init();
 800015e:	f000 f889 	bl	8000274 <MX_RTC_Init>

  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000162:	2200      	movs	r2, #0
 8000164:	4914      	ldr	r1, [pc, #80]	; (80001b8 <main+0x6c>)
 8000166:	4815      	ldr	r0, [pc, #84]	; (80001bc <main+0x70>)
 8000168:	f001 fa02 	bl	8001570 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800016c:	2200      	movs	r2, #0
 800016e:	4914      	ldr	r1, [pc, #80]	; (80001c0 <main+0x74>)
 8000170:	4812      	ldr	r0, [pc, #72]	; (80001bc <main+0x70>)
 8000172:	f001 fb8b 	bl	800188c <HAL_RTC_GetDate>
	  sprintf(mensaje,"Fecha: %d/%d/%d \nHora: %d:%d:%d\n",sDate.Date, sDate.Month, sDate.Year+2000, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000176:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <main+0x74>)
 8000178:	789b      	ldrb	r3, [r3, #2]
 800017a:	461c      	mov	r4, r3
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <main+0x74>)
 800017e:	785b      	ldrb	r3, [r3, #1]
 8000180:	461d      	mov	r5, r3
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <main+0x74>)
 8000184:	78db      	ldrb	r3, [r3, #3]
 8000186:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800018a:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <main+0x6c>)
 800018c:	7812      	ldrb	r2, [r2, #0]
 800018e:	4611      	mov	r1, r2
 8000190:	4a09      	ldr	r2, [pc, #36]	; (80001b8 <main+0x6c>)
 8000192:	7852      	ldrb	r2, [r2, #1]
 8000194:	4610      	mov	r0, r2
 8000196:	4a08      	ldr	r2, [pc, #32]	; (80001b8 <main+0x6c>)
 8000198:	7892      	ldrb	r2, [r2, #2]
 800019a:	9203      	str	r2, [sp, #12]
 800019c:	9002      	str	r0, [sp, #8]
 800019e:	9101      	str	r1, [sp, #4]
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	462b      	mov	r3, r5
 80001a4:	4622      	mov	r2, r4
 80001a6:	4907      	ldr	r1, [pc, #28]	; (80001c4 <main+0x78>)
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <main+0x7c>)
 80001aa:	f001 fe97 	bl	8001edc <siprintf>
	  HAL_Delay(200);
 80001ae:	20c8      	movs	r0, #200	; 0xc8
 80001b0:	f000 fa20 	bl	80005f4 <HAL_Delay>
  {
 80001b4:	e7d5      	b.n	8000162 <main+0x16>
 80001b6:	bf00      	nop
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	080027e8 	.word	0x080027e8
 80001c8:	200000a8 	.word	0x200000a8

080001cc <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b094      	sub	sp, #80	; 0x50
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 fe76 	bl	8001ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80001fc:	230a      	movs	r3, #10
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000204:	2310      	movs	r3, #16
 8000206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800020c:	2300      	movs	r3, #0
 800020e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fb01 	bl	800081c <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000220:	f000 f8a0 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000228:	2300      	movs	r3, #0
 800022a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fd6e 	bl	8000d20 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024a:	f000 f88b 	bl	8000364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800024e:	2301      	movs	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000256:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fee4 	bl	8001028 <HAL_RCCEx_PeriphCLKConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000266:	f000 f87d 	bl	8000364 <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3750      	adds	r7, #80	; 0x50
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_RTC_Init>:

static void MX_RTC_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2100      	movs	r1, #0
 800027e:	460a      	mov	r2, r1
 8000280:	801a      	strh	r2, [r3, #0]
 8000282:	460a      	mov	r2, r1
 8000284:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000286:	2300      	movs	r3, #0
 8000288:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800028a:	4b1d      	ldr	r3, [pc, #116]	; (8000300 <MX_RTC_Init+0x8c>)
 800028c:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <MX_RTC_Init+0x90>)
 800028e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <MX_RTC_Init+0x8c>)
 8000292:	f04f 32ff 	mov.w	r2, #4294967295
 8000296:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000298:	4b19      	ldr	r3, [pc, #100]	; (8000300 <MX_RTC_Init+0x8c>)
 800029a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800029e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002a0:	4817      	ldr	r0, [pc, #92]	; (8000300 <MX_RTC_Init+0x8c>)
 80002a2:	f001 f837 	bl	8001314 <HAL_RTC_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80002ac:	f000 f85a 	bl	8000364 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 80002b0:	2316      	movs	r3, #22
 80002b2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 80002b4:	2330      	movs	r3, #48	; 0x30
 80002b6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2201      	movs	r2, #1
 80002c0:	4619      	mov	r1, r3
 80002c2:	480f      	ldr	r0, [pc, #60]	; (8000300 <MX_RTC_Init+0x8c>)
 80002c4:	f001 f8bc 	bl	8001440 <HAL_RTC_SetTime>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80002ce:	f000 f849 	bl	8000364 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80002d2:	2306      	movs	r3, #6
 80002d4:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_OCTOBER;
 80002d6:	2310      	movs	r3, #16
 80002d8:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x29;
 80002da:	2329      	movs	r3, #41	; 0x29
 80002dc:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80002de:	2300      	movs	r3, #0
 80002e0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80002e2:	463b      	mov	r3, r7
 80002e4:	2201      	movs	r2, #1
 80002e6:	4619      	mov	r1, r3
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_RTC_Init+0x8c>)
 80002ea:	f001 fa19 	bl	8001720 <HAL_RTC_SetDate>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80002f4:	f000 f836 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000008c 	.word	0x2000008c
 8000304:	40002800 	.word	0x40002800

08000308 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MX_GPIO_Init+0x58>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a13      	ldr	r2, [pc, #76]	; (8000360 <MX_GPIO_Init+0x58>)
 8000314:	f043 0310 	orr.w	r3, r3, #16
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_GPIO_Init+0x58>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0310 	and.w	r3, r3, #16
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_GPIO_Init+0x58>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <MX_GPIO_Init+0x58>)
 800032c:	f043 0320 	orr.w	r3, r3, #32
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <MX_GPIO_Init+0x58>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0320 	and.w	r3, r3, #32
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_GPIO_Init+0x58>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <MX_GPIO_Init+0x58>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <MX_GPIO_Init+0x58>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <Error_Handler>:

void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <HAL_MspInit+0x5c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a14      	ldr	r2, [pc, #80]	; (80003cc <HAL_MspInit+0x5c>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <HAL_MspInit+0x5c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <HAL_MspInit+0x5c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <HAL_MspInit+0x5c>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <HAL_MspInit+0x5c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <HAL_MspInit+0x60>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <HAL_MspInit+0x60>)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010000 	.word	0x40010000

080003d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <HAL_RTC_MspInit+0x3c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d110      	bne.n	8000408 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80003e6:	f000 fa0d 	bl	8000804 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_RTC_MspInit+0x40>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a09      	ldr	r2, [pc, #36]	; (8000414 <HAL_RTC_MspInit+0x40>)
 80003f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_RTC_MspInit+0x40>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <HAL_RTC_MspInit+0x44>)
 8000404:	2201      	movs	r2, #1
 8000406:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40002800 	.word	0x40002800
 8000414:	40021000 	.word	0x40021000
 8000418:	4242043c 	.word	0x4242043c

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <NMI_Handler+0x4>

08000422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <HardFault_Handler+0x4>

08000428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <MemManage_Handler+0x4>

0800042e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <UsageFault_Handler+0x4>

0800043a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000462:	f000 f8ab 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000474:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <_sbrk+0x5c>)
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <_sbrk+0x60>)
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <_sbrk+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <_sbrk+0x64>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <_sbrk+0x68>)
 800048c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <_sbrk+0x64>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	693a      	ldr	r2, [r7, #16]
 8000498:	429a      	cmp	r2, r3
 800049a:	d207      	bcs.n	80004ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800049c:	f001 fcec 	bl	8001e78 <__errno>
 80004a0:	4603      	mov	r3, r0
 80004a2:	220c      	movs	r2, #12
 80004a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
 80004aa:	e009      	b.n	80004c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <_sbrk+0x64>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <_sbrk+0x64>)
 80004bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20005000 	.word	0x20005000
 80004cc:	00000400 	.word	0x00000400
 80004d0:	200000c8 	.word	0x200000c8
 80004d4:	200000e0 	.word	0x200000e0

080004d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800050a:	f7ff ffe5 	bl	80004d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f001 fcb9 	bl	8001e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe1b 	bl	800014c <main>
  bx lr
 8000516:	4770      	bx	lr
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000520:	08002880 	.word	0x08002880
  ldr r2, =_sbss
 8000524:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000528:	200000e0 	.word	0x200000e0

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f92b 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	200f      	movs	r0, #15
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff ff10 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f935 	bl	80007ea <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 f90b 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x1c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_IncTick+0x20>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_IncTick+0x20>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20000008 	.word	0x20000008
 80005dc:	200000cc 	.word	0x200000cc

080005e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <HAL_GetTick+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	200000cc 	.word	0x200000cc

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff fff0 	bl	80005e0 <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_Delay+0x44>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffe0 	bl	80005e0 <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8f7      	bhi.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000008 	.word	0x20000008

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff49 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff5e 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffb0 	bl	8000758 <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_PWR_EnableBkUpAccess+0x14>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	420e0020 	.word	0x420e0020

0800081c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e272      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b00      	cmp	r3, #0
 8000838:	f000 8087 	beq.w	800094a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800083c:	4b92      	ldr	r3, [pc, #584]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 030c 	and.w	r3, r3, #12
 8000844:	2b04      	cmp	r3, #4
 8000846:	d00c      	beq.n	8000862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000848:	4b8f      	ldr	r3, [pc, #572]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 030c 	and.w	r3, r3, #12
 8000850:	2b08      	cmp	r3, #8
 8000852:	d112      	bne.n	800087a <HAL_RCC_OscConfig+0x5e>
 8000854:	4b8c      	ldr	r3, [pc, #560]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000860:	d10b      	bne.n	800087a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000862:	4b89      	ldr	r3, [pc, #548]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086a:	2b00      	cmp	r3, #0
 800086c:	d06c      	beq.n	8000948 <HAL_RCC_OscConfig+0x12c>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d168      	bne.n	8000948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e24c      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000882:	d106      	bne.n	8000892 <HAL_RCC_OscConfig+0x76>
 8000884:	4b80      	ldr	r3, [pc, #512]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a7f      	ldr	r2, [pc, #508]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 800088a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	e02e      	b.n	80008f0 <HAL_RCC_OscConfig+0xd4>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10c      	bne.n	80008b4 <HAL_RCC_OscConfig+0x98>
 800089a:	4b7b      	ldr	r3, [pc, #492]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a7a      	ldr	r2, [pc, #488]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	4b78      	ldr	r3, [pc, #480]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a77      	ldr	r2, [pc, #476]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	e01d      	b.n	80008f0 <HAL_RCC_OscConfig+0xd4>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008bc:	d10c      	bne.n	80008d8 <HAL_RCC_OscConfig+0xbc>
 80008be:	4b72      	ldr	r3, [pc, #456]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a71      	ldr	r2, [pc, #452]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	4b6f      	ldr	r3, [pc, #444]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a6e      	ldr	r2, [pc, #440]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e00b      	b.n	80008f0 <HAL_RCC_OscConfig+0xd4>
 80008d8:	4b6b      	ldr	r3, [pc, #428]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b68      	ldr	r3, [pc, #416]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a67      	ldr	r2, [pc, #412]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80008ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d013      	beq.n	8000920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f8:	f7ff fe72 	bl	80005e0 <HAL_GetTick>
 80008fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fe:	e008      	b.n	8000912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000900:	f7ff fe6e 	bl	80005e0 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	2b64      	cmp	r3, #100	; 0x64
 800090c:	d901      	bls.n	8000912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800090e:	2303      	movs	r3, #3
 8000910:	e200      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000912:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f0      	beq.n	8000900 <HAL_RCC_OscConfig+0xe4>
 800091e:	e014      	b.n	800094a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000920:	f7ff fe5e 	bl	80005e0 <HAL_GetTick>
 8000924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000926:	e008      	b.n	800093a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000928:	f7ff fe5a 	bl	80005e0 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	2b64      	cmp	r3, #100	; 0x64
 8000934:	d901      	bls.n	800093a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000936:	2303      	movs	r3, #3
 8000938:	e1ec      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800093a:	4b53      	ldr	r3, [pc, #332]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f0      	bne.n	8000928 <HAL_RCC_OscConfig+0x10c>
 8000946:	e000      	b.n	800094a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	2b00      	cmp	r3, #0
 8000954:	d063      	beq.n	8000a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000956:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f003 030c 	and.w	r3, r3, #12
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00b      	beq.n	800097a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000962:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 030c 	and.w	r3, r3, #12
 800096a:	2b08      	cmp	r3, #8
 800096c:	d11c      	bne.n	80009a8 <HAL_RCC_OscConfig+0x18c>
 800096e:	4b46      	ldr	r3, [pc, #280]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d116      	bne.n	80009a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800097a:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d005      	beq.n	8000992 <HAL_RCC_OscConfig+0x176>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d001      	beq.n	8000992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e1c0      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000992:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4939      	ldr	r1, [pc, #228]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80009a2:	4313      	orrs	r3, r2
 80009a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a6:	e03a      	b.n	8000a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d020      	beq.n	80009f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <HAL_RCC_OscConfig+0x270>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b6:	f7ff fe13 	bl	80005e0 <HAL_GetTick>
 80009ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009bc:	e008      	b.n	80009d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009be:	f7ff fe0f 	bl	80005e0 <HAL_GetTick>
 80009c2:	4602      	mov	r2, r0
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d901      	bls.n	80009d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009cc:	2303      	movs	r3, #3
 80009ce:	e1a1      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d0:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0f0      	beq.n	80009be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4927      	ldr	r1, [pc, #156]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 80009ec:	4313      	orrs	r3, r2
 80009ee:	600b      	str	r3, [r1, #0]
 80009f0:	e015      	b.n	8000a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <HAL_RCC_OscConfig+0x270>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009f8:	f7ff fdf2 	bl	80005e0 <HAL_GetTick>
 80009fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009fe:	e008      	b.n	8000a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a00:	f7ff fdee 	bl	80005e0 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d901      	bls.n	8000a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e180      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f0      	bne.n	8000a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d03a      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d019      	beq.n	8000a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_RCC_OscConfig+0x274>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a38:	f7ff fdd2 	bl	80005e0 <HAL_GetTick>
 8000a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	e008      	b.n	8000a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a40:	f7ff fdce 	bl	80005e0 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d901      	bls.n	8000a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e160      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f0      	beq.n	8000a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 fac4 	bl	8000fec <RCC_Delay>
 8000a64:	e01c      	b.n	8000aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_RCC_OscConfig+0x274>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a6c:	f7ff fdb8 	bl	80005e0 <HAL_GetTick>
 8000a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a72:	e00f      	b.n	8000a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a74:	f7ff fdb4 	bl	80005e0 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d908      	bls.n	8000a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	e146      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	42420000 	.word	0x42420000
 8000a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a94:	4b92      	ldr	r3, [pc, #584]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1e9      	bne.n	8000a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 80a6 	beq.w	8000bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab2:	4b8b      	ldr	r3, [pc, #556]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10d      	bne.n	8000ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b88      	ldr	r3, [pc, #544]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a87      	ldr	r2, [pc, #540]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b85      	ldr	r3, [pc, #532]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ada:	4b82      	ldr	r3, [pc, #520]	; (8000ce4 <HAL_RCC_OscConfig+0x4c8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d118      	bne.n	8000b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae6:	4b7f      	ldr	r3, [pc, #508]	; (8000ce4 <HAL_RCC_OscConfig+0x4c8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a7e      	ldr	r2, [pc, #504]	; (8000ce4 <HAL_RCC_OscConfig+0x4c8>)
 8000aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000af2:	f7ff fd75 	bl	80005e0 <HAL_GetTick>
 8000af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af8:	e008      	b.n	8000b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000afa:	f7ff fd71 	bl	80005e0 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	2b64      	cmp	r3, #100	; 0x64
 8000b06:	d901      	bls.n	8000b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e103      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b0c:	4b75      	ldr	r3, [pc, #468]	; (8000ce4 <HAL_RCC_OscConfig+0x4c8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f0      	beq.n	8000afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d106      	bne.n	8000b2e <HAL_RCC_OscConfig+0x312>
 8000b20:	4b6f      	ldr	r3, [pc, #444]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4a6e      	ldr	r2, [pc, #440]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6213      	str	r3, [r2, #32]
 8000b2c:	e02d      	b.n	8000b8a <HAL_RCC_OscConfig+0x36e>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10c      	bne.n	8000b50 <HAL_RCC_OscConfig+0x334>
 8000b36:	4b6a      	ldr	r3, [pc, #424]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	4a69      	ldr	r2, [pc, #420]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b3c:	f023 0301 	bic.w	r3, r3, #1
 8000b40:	6213      	str	r3, [r2, #32]
 8000b42:	4b67      	ldr	r3, [pc, #412]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b44:	6a1b      	ldr	r3, [r3, #32]
 8000b46:	4a66      	ldr	r2, [pc, #408]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b48:	f023 0304 	bic.w	r3, r3, #4
 8000b4c:	6213      	str	r3, [r2, #32]
 8000b4e:	e01c      	b.n	8000b8a <HAL_RCC_OscConfig+0x36e>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	d10c      	bne.n	8000b72 <HAL_RCC_OscConfig+0x356>
 8000b58:	4b61      	ldr	r3, [pc, #388]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	4a60      	ldr	r2, [pc, #384]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6213      	str	r3, [r2, #32]
 8000b64:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b66:	6a1b      	ldr	r3, [r3, #32]
 8000b68:	4a5d      	ldr	r2, [pc, #372]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6213      	str	r3, [r2, #32]
 8000b70:	e00b      	b.n	8000b8a <HAL_RCC_OscConfig+0x36e>
 8000b72:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	4a5a      	ldr	r2, [pc, #360]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b78:	f023 0301 	bic.w	r3, r3, #1
 8000b7c:	6213      	str	r3, [r2, #32]
 8000b7e:	4b58      	ldr	r3, [pc, #352]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	4a57      	ldr	r2, [pc, #348]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000b84:	f023 0304 	bic.w	r3, r3, #4
 8000b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d015      	beq.n	8000bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b92:	f7ff fd25 	bl	80005e0 <HAL_GetTick>
 8000b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b98:	e00a      	b.n	8000bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b9a:	f7ff fd21 	bl	80005e0 <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d901      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000bac:	2303      	movs	r3, #3
 8000bae:	e0b1      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb0:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0ee      	beq.n	8000b9a <HAL_RCC_OscConfig+0x37e>
 8000bbc:	e014      	b.n	8000be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bbe:	f7ff fd0f 	bl	80005e0 <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc4:	e00a      	b.n	8000bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fd0b 	bl	80005e0 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d901      	bls.n	8000bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e09b      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bdc:	4b40      	ldr	r3, [pc, #256]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1ee      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d105      	bne.n	8000bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bee:	4b3c      	ldr	r3, [pc, #240]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a3b      	ldr	r2, [pc, #236]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8087 	beq.w	8000d12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c04:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b08      	cmp	r3, #8
 8000c0e:	d061      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d146      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_RCC_OscConfig+0x4cc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1e:	f7ff fcdf 	bl	80005e0 <HAL_GetTick>
 8000c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c24:	e008      	b.n	8000c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c26:	f7ff fcdb 	bl	80005e0 <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d901      	bls.n	8000c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c34:	2303      	movs	r3, #3
 8000c36:	e06d      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f0      	bne.n	8000c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c4c:	d108      	bne.n	8000c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c4e:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4921      	ldr	r1, [pc, #132]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a19      	ldr	r1, [r3, #32]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c70:	430b      	orrs	r3, r1
 8000c72:	491b      	ldr	r1, [pc, #108]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c74:	4313      	orrs	r3, r2
 8000c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_RCC_OscConfig+0x4cc>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fcaf 	bl	80005e0 <HAL_GetTick>
 8000c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c84:	e008      	b.n	8000c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c86:	f7ff fcab 	bl	80005e0 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d901      	bls.n	8000c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e03d      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f0      	beq.n	8000c86 <HAL_RCC_OscConfig+0x46a>
 8000ca4:	e035      	b.n	8000d12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_RCC_OscConfig+0x4cc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cac:	f7ff fc98 	bl	80005e0 <HAL_GetTick>
 8000cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb2:	e008      	b.n	8000cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cb4:	f7ff fc94 	bl	80005e0 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d901      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e026      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_RCC_OscConfig+0x4c4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f0      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x498>
 8000cd2:	e01e      	b.n	8000d12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d107      	bne.n	8000cec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e019      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40007000 	.word	0x40007000
 8000ce8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_RCC_OscConfig+0x500>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d106      	bne.n	8000d0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d001      	beq.n	8000d12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e0d0      	b.n	8000ed6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d34:	4b6a      	ldr	r3, [pc, #424]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d910      	bls.n	8000d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d42:	4b67      	ldr	r3, [pc, #412]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f023 0207 	bic.w	r2, r3, #7
 8000d4a:	4965      	ldr	r1, [pc, #404]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d52:	4b63      	ldr	r3, [pc, #396]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d001      	beq.n	8000d64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e0b8      	b.n	8000ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d020      	beq.n	8000db2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d7c:	4b59      	ldr	r3, [pc, #356]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d005      	beq.n	8000da0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d94:	4b53      	ldr	r3, [pc, #332]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4a52      	ldr	r2, [pc, #328]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000da0:	4b50      	ldr	r3, [pc, #320]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	494d      	ldr	r1, [pc, #308]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d040      	beq.n	8000e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d107      	bne.n	8000dd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d115      	bne.n	8000dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e07f      	b.n	8000ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d107      	bne.n	8000dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dde:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e073      	b.n	8000ed6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dee:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e06b      	b.n	8000ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dfe:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f023 0203 	bic.w	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4936      	ldr	r1, [pc, #216]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e10:	f7ff fbe6 	bl	80005e0 <HAL_GetTick>
 8000e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e16:	e00a      	b.n	8000e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e18:	f7ff fbe2 	bl	80005e0 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e053      	b.n	8000ed6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 020c 	and.w	r2, r3, #12
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d1eb      	bne.n	8000e18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d210      	bcs.n	8000e70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4e:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 0207 	bic.w	r2, r3, #7
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d001      	beq.n	8000e70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e032      	b.n	8000ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d008      	beq.n	8000e8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	4916      	ldr	r1, [pc, #88]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d009      	beq.n	8000eae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000eae:	f000 f821 	bl	8000ef4 <HAL_RCC_GetSysClockFreq>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	490a      	ldr	r1, [pc, #40]	; (8000ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8000ec0:	5ccb      	ldrb	r3, [r1, r3]
 8000ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <HAL_RCC_ClockConfig+0x1cc>)
 8000ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fb44 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	0800282c 	.word	0x0800282c
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ef4:	b490      	push	{r4, r7}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0xac>)
 8000efc:	1d3c      	adds	r4, r7, #4
 8000efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f04:	f240 2301 	movw	r3, #513	; 0x201
 8000f08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d002      	beq.n	8000f34 <HAL_RCC_GetSysClockFreq+0x40>
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d003      	beq.n	8000f3a <HAL_RCC_GetSysClockFreq+0x46>
 8000f32:	e02b      	b.n	8000f8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f36:	623b      	str	r3, [r7, #32]
      break;
 8000f38:	e02b      	b.n	8000f92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	0c9b      	lsrs	r3, r3, #18
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3328      	adds	r3, #40	; 0x28
 8000f44:	443b      	add	r3, r7
 8000f46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d012      	beq.n	8000f7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	0c5b      	lsrs	r3, r3, #17
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	3328      	adds	r3, #40	; 0x28
 8000f62:	443b      	add	r3, r7
 8000f64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f6e:	fb03 f202 	mul.w	r2, r3, r2
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7a:	e004      	b.n	8000f86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	623b      	str	r3, [r7, #32]
      break;
 8000f8a:	e002      	b.n	8000f92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f8e:	623b      	str	r3, [r7, #32]
      break;
 8000f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f92:	6a3b      	ldr	r3, [r7, #32]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc90      	pop	{r4, r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	0800280c 	.word	0x0800280c
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	007a1200 	.word	0x007a1200
 8000fac:	003d0900 	.word	0x003d0900

08000fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fc8:	f7ff fff2 	bl	8000fb0 <HAL_RCC_GetHCLKFreq>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	0adb      	lsrs	r3, r3, #11
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	4903      	ldr	r1, [pc, #12]	; (8000fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fda:	5ccb      	ldrb	r3, [r1, r3]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	0800283c 	.word	0x0800283c

08000fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <RCC_Delay+0x34>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <RCC_Delay+0x38>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0a5b      	lsrs	r3, r3, #9
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001008:	bf00      	nop
  }
  while (Delay --);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	60fa      	str	r2, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f9      	bne.n	8001008 <RCC_Delay+0x1c>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	20000000 	.word	0x20000000
 8001024:	10624dd3 	.word	0x10624dd3

08001028 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d07d      	beq.n	8001140 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10d      	bne.n	8001070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	61d3      	str	r3, [r2, #28]
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800106c:	2301      	movs	r3, #1
 800106e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	4b46      	ldr	r3, [pc, #280]	; (800118c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	2b00      	cmp	r3, #0
 800107a:	d118      	bne.n	80010ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a42      	ldr	r2, [pc, #264]	; (800118c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001088:	f7ff faaa 	bl	80005e0 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108e:	e008      	b.n	80010a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001090:	f7ff faa6 	bl	80005e0 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	; 0x64
 800109c:	d901      	bls.n	80010a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e06d      	b.n	800117e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d02e      	beq.n	800111c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d027      	beq.n	800111c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80010e2:	4a29      	ldr	r2, [pc, #164]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d014      	beq.n	800111c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fa75 	bl	80005e0 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fa71 	bl	80005e0 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e036      	b.n	800117e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0ee      	beq.n	80010fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4917      	ldr	r1, [pc, #92]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800112a:	4313      	orrs	r3, r2
 800112c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d105      	bne.n	8001140 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	4a13      	ldr	r2, [pc, #76]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800113a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800113e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d008      	beq.n	800115e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	490b      	ldr	r1, [pc, #44]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b00      	cmp	r3, #0
 8001168:	d008      	beq.n	800117c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800116a:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	4904      	ldr	r1, [pc, #16]	; (8001188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	40007000 	.word	0x40007000
 8001190:	42420440 	.word	0x42420440

08001194 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b08d      	sub	sp, #52	; 0x34
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800119c:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800119e:	f107 040c 	add.w	r4, r7, #12
 80011a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011a8:	f240 2301 	movw	r3, #513	; 0x201
 80011ac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b10      	cmp	r3, #16
 80011c6:	d00a      	beq.n	80011de <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	f200 808e 	bhi.w	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d049      	beq.n	800126a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d079      	beq.n	80012d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80011dc:	e086      	b.n	80012ec <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80011de:	4b49      	ldr	r3, [pc, #292]	; (8001304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80011e4:	4b47      	ldr	r3, [pc, #284]	; (8001304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d07f      	beq.n	80012f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	0c9b      	lsrs	r3, r3, #18
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	3330      	adds	r3, #48	; 0x30
 80011fa:	443b      	add	r3, r7
 80011fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001200:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d017      	beq.n	800123c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800120c:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	0c5b      	lsrs	r3, r3, #17
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	3330      	adds	r3, #48	; 0x30
 8001218:	443b      	add	r3, r7
 800121a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00d      	beq.n	8001246 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800122a:	4a37      	ldr	r2, [pc, #220]	; (8001308 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123a:	e004      	b.n	8001246 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	4a33      	ldr	r2, [pc, #204]	; (800130c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001252:	d102      	bne.n	800125a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001258:	e04a      	b.n	80012f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	085b      	lsrs	r3, r3, #1
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001268:	e042      	b.n	80012f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800127a:	d108      	bne.n	800128e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8001286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
 800128c:	e01f      	b.n	80012ce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001298:	d109      	bne.n	80012ae <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80012a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ac:	e00f      	b.n	80012ce <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d016      	beq.n	80012f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80012c6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80012cc:	e012      	b.n	80012f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80012ce:	e011      	b.n	80012f4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80012d0:	f7ff fe78 	bl	8000fc4 <HAL_RCC_GetPCLK2Freq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	0b9b      	lsrs	r3, r3, #14
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	3301      	adds	r3, #1
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80012ea:	e004      	b.n	80012f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80012ec:	bf00      	nop
 80012ee:	e002      	b.n	80012f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80012f0:	bf00      	nop
 80012f2:	e000      	b.n	80012f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80012f4:	bf00      	nop
    }
  }
  return (frequency);
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3734      	adds	r7, #52	; 0x34
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	0800281c 	.word	0x0800281c
 8001304:	40021000 	.word	0x40021000
 8001308:	007a1200 	.word	0x007a1200
 800130c:	003d0900 	.word	0x003d0900
 8001310:	aaaaaaab 	.word	0xaaaaaaab

08001314 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e084      	b.n	8001434 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7c5b      	ldrb	r3, [r3, #17]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff f84a 	bl	80003d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 faf4 	bl	8001934 <HAL_RTC_WaitForSynchro>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d004      	beq.n	800135c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2204      	movs	r2, #4
 8001356:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e06b      	b.n	8001434 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fbad 	bl	8001abc <RTC_EnterInitMode>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2204      	movs	r2, #4
 800136c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e060      	b.n	8001434 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0207 	bic.w	r2, r2, #7
 8001380:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_RTC_Init+0x128>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a2b      	ldr	r2, [pc, #172]	; (800143c <HAL_RTC_Init+0x128>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <HAL_RTC_Init+0x128>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4926      	ldr	r1, [pc, #152]	; (800143c <HAL_RTC_Init+0x128>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d003      	beq.n	80013ba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e00e      	b.n	80013d8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff feea 	bl	8001194 <HAL_RCCEx_GetPeriphCLKFreq>
 80013c0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2204      	movs	r2, #4
 80013cc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e030      	b.n	8001434 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f023 010f 	bic.w	r1, r3, #15
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0c1a      	lsrs	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	041b      	lsls	r3, r3, #16
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	b291      	uxth	r1, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	430b      	orrs	r3, r1
 8001402:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fb81 	bl	8001b0c <RTC_ExitInitMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2204      	movs	r2, #4
 8001414:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00c      	b.n	8001434 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001432:	2300      	movs	r3, #0
  }
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40006c00 	.word	0x40006c00

08001440 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <HAL_RTC_SetTime+0x20>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e080      	b.n	8001566 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	7c1b      	ldrb	r3, [r3, #16]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_RTC_SetTime+0x30>
 800146c:	2302      	movs	r3, #2
 800146e:	e07a      	b.n	8001566 <HAL_RTC_SetTime+0x126>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2202      	movs	r2, #2
 800147a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d113      	bne.n	80014aa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800148c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	4619      	mov	r1, r3
 8001496:	460b      	mov	r3, r1
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	1a5b      	subs	r3, r3, r1
 800149c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800149e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80014a4:	4413      	add	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e01e      	b.n	80014e8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fb71 	bl	8001b96 <RTC_Bcd2ToByte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80014bc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	785b      	ldrb	r3, [r3, #1]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fb66 	bl	8001b96 <RTC_Bcd2ToByte>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80014d6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fb5a 	bl	8001b96 <RTC_Bcd2ToByte>
 80014e2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80014e4:	4423      	add	r3, r4
 80014e6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80014e8:	6979      	ldr	r1, [r7, #20]
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 fa7f 	bl	80019ee <RTC_WriteTimeCounter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2204      	movs	r2, #4
 80014fa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e02f      	b.n	8001566 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0205 	bic.w	r2, r2, #5
 8001514:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 fa90 	bl	8001a3c <RTC_ReadAlarmCounter>
 800151c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d018      	beq.n	8001558 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	429a      	cmp	r2, r3
 800152c:	d214      	bcs.n	8001558 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001534:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001538:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800153a:	6939      	ldr	r1, [r7, #16]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fa96 	bl	8001a6e <RTC_WriteAlarmCounter>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2204      	movs	r2, #4
 800154c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e006      	b.n	8001566 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001564:	2300      	movs	r3, #0
  }
}
 8001566:	4618      	mov	r0, r3
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
	...

08001570 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_RTC_GetTime+0x28>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b5      	b.n	8001708 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0ac      	b.n	8001708 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 f9ed 	bl	800198e <RTC_ReadTimeCounter>
 80015b4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4a55      	ldr	r2, [pc, #340]	; (8001710 <HAL_RTC_GetTime+0x1a0>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0adb      	lsrs	r3, r3, #11
 80015c0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_RTC_GetTime+0x1a0>)
 80015c6:	fba3 1302 	umull	r1, r3, r3, r2
 80015ca:	0adb      	lsrs	r3, r3, #11
 80015cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_RTC_GetTime+0x1a4>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	095b      	lsrs	r3, r3, #5
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_RTC_GetTime+0x1a0>)
 80015e8:	fba2 1203 	umull	r1, r2, r2, r3
 80015ec:	0ad2      	lsrs	r2, r2, #11
 80015ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80015f2:	fb01 f202 	mul.w	r2, r1, r2
 80015f6:	1a9a      	subs	r2, r3, r2
 80015f8:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_RTC_GetTime+0x1a4>)
 80015fa:	fba3 1302 	umull	r1, r3, r3, r2
 80015fe:	0959      	lsrs	r1, r3, #5
 8001600:	460b      	mov	r3, r1
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	1a5b      	subs	r3, r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	1ad1      	subs	r1, r2, r3
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	2b17      	cmp	r3, #23
 8001614:	d955      	bls.n	80016c2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_RTC_GetTime+0x1a8>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001622:	6939      	ldr	r1, [r7, #16]
 8001624:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <HAL_RTC_GetTime+0x1a8>)
 8001626:	fba3 2301 	umull	r2, r3, r3, r1
 800162a:	091a      	lsrs	r2, r3, #4
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1aca      	subs	r2, r1, r3
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 f9fd 	bl	8001a3c <RTC_ReadAlarmCounter>
 8001642:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164a:	d008      	beq.n	800165e <HAL_RTC_GetTime+0xee>
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	429a      	cmp	r2, r3
 8001652:	d904      	bls.n	800165e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	e002      	b.n	8001664 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	4a2d      	ldr	r2, [pc, #180]	; (800171c <HAL_RTC_GetTime+0x1ac>)
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001672:	69b9      	ldr	r1, [r7, #24]
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 f9ba 	bl	80019ee <RTC_WriteTimeCounter>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e041      	b.n	8001708 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168a:	d00c      	beq.n	80016a6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4413      	add	r3, r2
 8001692:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001694:	69f9      	ldr	r1, [r7, #28]
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f9e9 	bl	8001a6e <RTC_WriteAlarmCounter>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e030      	b.n	8001708 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80016a6:	69f9      	ldr	r1, [r7, #28]
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 f9e0 	bl	8001a6e <RTC_WriteAlarmCounter>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e027      	b.n	8001708 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80016b8:	6979      	ldr	r1, [r7, #20]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 fa88 	bl	8001bd0 <RTC_DateUpdate>
 80016c0:	e003      	b.n	80016ca <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01a      	beq.n	8001706 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fa41 	bl	8001b5c <RTC_ByteToBcd2>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fa38 	bl	8001b5c <RTC_ByteToBcd2>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	789b      	ldrb	r3, [r3, #2]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fa2f 	bl	8001b5c <RTC_ByteToBcd2>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	91a2b3c5 	.word	0x91a2b3c5
 8001714:	88888889 	.word	0x88888889
 8001718:	aaaaaaab 	.word	0xaaaaaaab
 800171c:	00015180 	.word	0x00015180

08001720 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <HAL_RTC_SetDate+0x24>
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e097      	b.n	8001878 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	7c1b      	ldrb	r3, [r3, #16]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_RTC_SetDate+0x34>
 8001750:	2302      	movs	r3, #2
 8001752:	e091      	b.n	8001878 <HAL_RTC_SetDate+0x158>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2202      	movs	r2, #2
 800175e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10c      	bne.n	8001780 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	78da      	ldrb	r2, [r3, #3]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	785a      	ldrb	r2, [r3, #1]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	789a      	ldrb	r2, [r3, #2]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	739a      	strb	r2, [r3, #14]
 800177e:	e01a      	b.n	80017b6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	78db      	ldrb	r3, [r3, #3]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fa06 	bl	8001b96 <RTC_Bcd2ToByte>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	785b      	ldrb	r3, [r3, #1]
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f9fd 	bl	8001b96 <RTC_Bcd2ToByte>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	789b      	ldrb	r3, [r3, #2]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f9f4 	bl	8001b96 <RTC_Bcd2ToByte>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	7bdb      	ldrb	r3, [r3, #15]
 80017ba:	4618      	mov	r0, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	7b59      	ldrb	r1, [r3, #13]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	7b9b      	ldrb	r3, [r3, #14]
 80017c4:	461a      	mov	r2, r3
 80017c6:	f000 fadf 	bl	8001d88 <RTC_WeekDayNum>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	7b1a      	ldrb	r2, [r3, #12]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f8d7 	bl	800198e <RTC_ReadTimeCounter>
 80017e0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4a26      	ldr	r2, [pc, #152]	; (8001880 <HAL_RTC_SetDate+0x160>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0adb      	lsrs	r3, r3, #11
 80017ec:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b18      	cmp	r3, #24
 80017f2:	d93a      	bls.n	800186a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	4a23      	ldr	r2, [pc, #140]	; (8001884 <HAL_RTC_SetDate+0x164>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	4a22      	ldr	r2, [pc, #136]	; (8001888 <HAL_RTC_SetDate+0x168>)
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800180a:	69f9      	ldr	r1, [r7, #28]
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 f8ee 	bl	80019ee <RTC_WriteTimeCounter>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d007      	beq.n	8001828 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2204      	movs	r2, #4
 800181c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e027      	b.n	8001878 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f907 	bl	8001a3c <RTC_ReadAlarmCounter>
 800182e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001836:	d018      	beq.n	800186a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	429a      	cmp	r2, r3
 800183e:	d214      	bcs.n	800186a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001846:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800184a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800184c:	69b9      	ldr	r1, [r7, #24]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f90d 	bl	8001a6e <RTC_WriteAlarmCounter>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2204      	movs	r2, #4
 800185e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e006      	b.n	8001878 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2201      	movs	r2, #1
 800186e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	91a2b3c5 	.word	0x91a2b3c5
 8001884:	aaaaaaab 	.word	0xaaaaaaab
 8001888:	00015180 	.word	0x00015180

0800188c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2100      	movs	r1, #0
 800189e:	460a      	mov	r2, r1
 80018a0:	801a      	strh	r2, [r3, #0]
 80018a2:	460a      	mov	r2, r1
 80018a4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_RTC_GetDate+0x26>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e03a      	b.n	800192c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff fe56 	bl	8001570 <HAL_RTC_GetTime>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e02e      	b.n	800192c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	7b1a      	ldrb	r2, [r3, #12]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	7bda      	ldrb	r2, [r3, #15]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	7b5a      	ldrb	r2, [r3, #13]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	7b9a      	ldrb	r2, [r3, #14]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01a      	beq.n	800192a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	78db      	ldrb	r3, [r3, #3]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f92f 	bl	8001b5c <RTC_ByteToBcd2>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f926 	bl	8001b5c <RTC_ByteToBcd2>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	789b      	ldrb	r3, [r3, #2]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f91d 	bl	8001b5c <RTC_ByteToBcd2>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e01d      	b.n	8001986 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0208 	bic.w	r2, r2, #8
 8001958:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800195a:	f7fe fe41 	bl	80005e0 <HAL_GetTick>
 800195e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001960:	e009      	b.n	8001976 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001962:	f7fe fe3d 	bl	80005e0 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001970:	d901      	bls.n	8001976 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e007      	b.n	8001986 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ee      	beq.n	8001962 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800198e:	b480      	push	{r7}
 8001990:	b087      	sub	sp, #28
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	827b      	strh	r3, [r7, #18]
 800199a:	2300      	movs	r3, #0
 800199c:	823b      	strh	r3, [r7, #16]
 800199e:	2300      	movs	r3, #0
 80019a0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80019be:	8a7a      	ldrh	r2, [r7, #18]
 80019c0:	8a3b      	ldrh	r3, [r7, #16]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d008      	beq.n	80019d8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80019c6:	8a3b      	ldrh	r3, [r7, #16]
 80019c8:	041a      	lsls	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e004      	b.n	80019e2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80019d8:	8a7b      	ldrh	r3, [r7, #18]
 80019da:	041a      	lsls	r2, r3, #16
 80019dc:	89fb      	ldrh	r3, [r7, #14]
 80019de:	4313      	orrs	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80019e2:	697b      	ldr	r3, [r7, #20]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f85d 	bl	8001abc <RTC_EnterInitMode>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e011      	b.n	8001a32 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	0c12      	lsrs	r2, r2, #16
 8001a16:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b292      	uxth	r2, r2
 8001a20:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f872 	bl	8001b0c <RTC_ExitInitMode>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	81fb      	strh	r3, [r7, #14]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	041a      	lsls	r2, r3, #16
 8001a60:	89bb      	ldrh	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f81d 	bl	8001abc <RTC_EnterInitMode>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e011      	b.n	8001ab2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	0c12      	lsrs	r2, r2, #16
 8001a96:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	b292      	uxth	r2, r2
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f832 	bl	8001b0c <RTC_ExitInitMode>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001ac8:	f7fe fd8a 	bl	80005e0 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001ace:	e009      	b.n	8001ae4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001ad0:	f7fe fd86 	bl	80005e0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ade:	d901      	bls.n	8001ae4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e00f      	b.n	8001b04 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ee      	beq.n	8001ad0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0210 	orr.w	r2, r2, #16
 8001b00:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0210 	bic.w	r2, r2, #16
 8001b26:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001b28:	f7fe fd5a 	bl	80005e0 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001b2e:	e009      	b.n	8001b44 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001b30:	f7fe fd56 	bl	80005e0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b3e:	d901      	bls.n	8001b44 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e007      	b.n	8001b54 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0ee      	beq.n	8001b30 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8001b6a:	e005      	b.n	8001b78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	3b0a      	subs	r3, #10
 8001b76:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	d8f6      	bhi.n	8001b6c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b2db      	uxtb	r3, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7bdb      	ldrb	r3, [r3, #15]
 8001bee:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7b5b      	ldrb	r3, [r3, #13]
 8001bf4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7b9b      	ldrb	r3, [r3, #14]
 8001bfa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	e06f      	b.n	8001ce2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d011      	beq.n	8001c2c <RTC_DateUpdate+0x5c>
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d00e      	beq.n	8001c2c <RTC_DateUpdate+0x5c>
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d00b      	beq.n	8001c2c <RTC_DateUpdate+0x5c>
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	2b07      	cmp	r3, #7
 8001c18:	d008      	beq.n	8001c2c <RTC_DateUpdate+0x5c>
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d005      	beq.n	8001c2c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b0a      	cmp	r3, #10
 8001c24:	d002      	beq.n	8001c2c <RTC_DateUpdate+0x5c>
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d117      	bne.n	8001c5c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b1e      	cmp	r3, #30
 8001c30:	d803      	bhi.n	8001c3a <RTC_DateUpdate+0x6a>
      {
        day++;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3301      	adds	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001c38:	e050      	b.n	8001cdc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d005      	beq.n	8001c4c <RTC_DateUpdate+0x7c>
        {
          month++;
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	3301      	adds	r3, #1
 8001c44:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001c46:	2301      	movs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001c4a:	e047      	b.n	8001cdc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001c50:	2301      	movs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
          year++;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8001c5a:	e03f      	b.n	8001cdc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d008      	beq.n	8001c74 <RTC_DateUpdate+0xa4>
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d005      	beq.n	8001c74 <RTC_DateUpdate+0xa4>
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	d002      	beq.n	8001c74 <RTC_DateUpdate+0xa4>
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b0b      	cmp	r3, #11
 8001c72:	d10c      	bne.n	8001c8e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b1d      	cmp	r3, #29
 8001c78:	d803      	bhi.n	8001c82 <RTC_DateUpdate+0xb2>
      {
        day++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001c80:	e02c      	b.n	8001cdc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	3301      	adds	r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001c8c:	e026      	b.n	8001cdc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b1b      	cmp	r3, #27
 8001c98:	d803      	bhi.n	8001ca2 <RTC_DateUpdate+0xd2>
      {
        day++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	e01c      	b.n	8001cdc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b1c      	cmp	r3, #28
 8001ca6:	d111      	bne.n	8001ccc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f839 	bl	8001d24 <RTC_IsLeapYear>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e00d      	b.n	8001cdc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e007      	b.n	8001cdc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b1d      	cmp	r3, #29
 8001cd0:	d104      	bne.n	8001cdc <RTC_DateUpdate+0x10c>
      {
        month++;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d38b      	bcc.n	8001c02 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6978      	ldr	r0, [r7, #20]
 8001d0e:	f000 f83b 	bl	8001d88 <RTC_WeekDayNum>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	731a      	strb	r2, [r3, #12]
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e01d      	b.n	8001d7a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <RTC_IsLeapYear+0x60>)
 8001d42:	fba2 1203 	umull	r1, r2, r2, r3
 8001d46:	0952      	lsrs	r2, r2, #5
 8001d48:	2164      	movs	r1, #100	; 0x64
 8001d4a:	fb01 f202 	mul.w	r2, r1, r2
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <RTC_IsLeapYear+0x60>)
 8001d5e:	fba2 1203 	umull	r1, r2, r2, r3
 8001d62:	09d2      	lsrs	r2, r2, #7
 8001d64:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001d68:	fb01 f202 	mul.w	r2, r1, r2
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8001d78:	2300      	movs	r3, #0
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	51eb851f 	.word	0x51eb851f

08001d88 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
 8001d94:	4613      	mov	r3, r2
 8001d96:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001da6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d82d      	bhi.n	8001e0a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <RTC_WeekDayNum+0xe4>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	085a      	lsrs	r2, r3, #1
 8001dc2:	78bb      	ldrb	r3, [r7, #2]
 8001dc4:	441a      	add	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	441a      	add	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	4926      	ldr	r1, [pc, #152]	; (8001e70 <RTC_WeekDayNum+0xe8>)
 8001dd8:	fba1 1303 	umull	r1, r3, r1, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	1ad2      	subs	r2, r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	4922      	ldr	r1, [pc, #136]	; (8001e70 <RTC_WeekDayNum+0xe8>)
 8001de6:	fba1 1303 	umull	r1, r3, r1, r3
 8001dea:	09db      	lsrs	r3, r3, #7
 8001dec:	4413      	add	r3, r2
 8001dee:	1d1a      	adds	r2, r3, #4
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <RTC_WeekDayNum+0xec>)
 8001df2:	fba3 1302 	umull	r1, r3, r3, r2
 8001df6:	1ad1      	subs	r1, r2, r3
 8001df8:	0849      	lsrs	r1, r1, #1
 8001dfa:	440b      	add	r3, r1
 8001dfc:	0899      	lsrs	r1, r3, #2
 8001dfe:	460b      	mov	r3, r1
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a5b      	subs	r3, r3, r1
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e029      	b.n	8001e5e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <RTC_WeekDayNum+0xe4>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	085a      	lsrs	r2, r3, #1
 8001e1e:	78bb      	ldrb	r3, [r7, #2]
 8001e20:	441a      	add	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	441a      	add	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	441a      	add	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4910      	ldr	r1, [pc, #64]	; (8001e70 <RTC_WeekDayNum+0xe8>)
 8001e30:	fba1 1303 	umull	r1, r3, r1, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	1ad2      	subs	r2, r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	490d      	ldr	r1, [pc, #52]	; (8001e70 <RTC_WeekDayNum+0xe8>)
 8001e3c:	fba1 1303 	umull	r1, r3, r1, r3
 8001e40:	09db      	lsrs	r3, r3, #7
 8001e42:	4413      	add	r3, r2
 8001e44:	1c9a      	adds	r2, r3, #2
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <RTC_WeekDayNum+0xec>)
 8001e48:	fba3 1302 	umull	r1, r3, r3, r2
 8001e4c:	1ad1      	subs	r1, r2, r3
 8001e4e:	0849      	lsrs	r1, r1, #1
 8001e50:	440b      	add	r3, r1
 8001e52:	0899      	lsrs	r1, r3, #2
 8001e54:	460b      	mov	r3, r1
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	1a5b      	subs	r3, r3, r1
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	b2db      	uxtb	r3, r3
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	38e38e39 	.word	0x38e38e39
 8001e70:	51eb851f 	.word	0x51eb851f
 8001e74:	24924925 	.word	0x24924925

08001e78 <__errno>:
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <__errno+0x8>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	2000000c 	.word	0x2000000c

08001e84 <__libc_init_array>:
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	2600      	movs	r6, #0
 8001e88:	4d0c      	ldr	r5, [pc, #48]	; (8001ebc <__libc_init_array+0x38>)
 8001e8a:	4c0d      	ldr	r4, [pc, #52]	; (8001ec0 <__libc_init_array+0x3c>)
 8001e8c:	1b64      	subs	r4, r4, r5
 8001e8e:	10a4      	asrs	r4, r4, #2
 8001e90:	42a6      	cmp	r6, r4
 8001e92:	d109      	bne.n	8001ea8 <__libc_init_array+0x24>
 8001e94:	f000 fc9c 	bl	80027d0 <_init>
 8001e98:	2600      	movs	r6, #0
 8001e9a:	4d0a      	ldr	r5, [pc, #40]	; (8001ec4 <__libc_init_array+0x40>)
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <__libc_init_array+0x44>)
 8001e9e:	1b64      	subs	r4, r4, r5
 8001ea0:	10a4      	asrs	r4, r4, #2
 8001ea2:	42a6      	cmp	r6, r4
 8001ea4:	d105      	bne.n	8001eb2 <__libc_init_array+0x2e>
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
 8001ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eac:	4798      	blx	r3
 8001eae:	3601      	adds	r6, #1
 8001eb0:	e7ee      	b.n	8001e90 <__libc_init_array+0xc>
 8001eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb6:	4798      	blx	r3
 8001eb8:	3601      	adds	r6, #1
 8001eba:	e7f2      	b.n	8001ea2 <__libc_init_array+0x1e>
 8001ebc:	08002878 	.word	0x08002878
 8001ec0:	08002878 	.word	0x08002878
 8001ec4:	08002878 	.word	0x08002878
 8001ec8:	0800287c 	.word	0x0800287c

08001ecc <memset>:
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4402      	add	r2, r0
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <memset+0xa>
 8001ed4:	4770      	bx	lr
 8001ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eda:	e7f9      	b.n	8001ed0 <memset+0x4>

08001edc <siprintf>:
 8001edc:	b40e      	push	{r1, r2, r3}
 8001ede:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ee2:	b500      	push	{lr}
 8001ee4:	b09c      	sub	sp, #112	; 0x70
 8001ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8001ee8:	9002      	str	r0, [sp, #8]
 8001eea:	9006      	str	r0, [sp, #24]
 8001eec:	9107      	str	r1, [sp, #28]
 8001eee:	9104      	str	r1, [sp, #16]
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <siprintf+0x38>)
 8001ef2:	4909      	ldr	r1, [pc, #36]	; (8001f18 <siprintf+0x3c>)
 8001ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ef8:	9105      	str	r1, [sp, #20]
 8001efa:	6800      	ldr	r0, [r0, #0]
 8001efc:	a902      	add	r1, sp, #8
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	f000 f868 	bl	8001fd4 <_svfiprintf_r>
 8001f04:	2200      	movs	r2, #0
 8001f06:	9b02      	ldr	r3, [sp, #8]
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	b01c      	add	sp, #112	; 0x70
 8001f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f10:	b003      	add	sp, #12
 8001f12:	4770      	bx	lr
 8001f14:	2000000c 	.word	0x2000000c
 8001f18:	ffff0208 	.word	0xffff0208

08001f1c <__ssputs_r>:
 8001f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f20:	688e      	ldr	r6, [r1, #8]
 8001f22:	4682      	mov	sl, r0
 8001f24:	429e      	cmp	r6, r3
 8001f26:	460c      	mov	r4, r1
 8001f28:	4690      	mov	r8, r2
 8001f2a:	461f      	mov	r7, r3
 8001f2c:	d838      	bhi.n	8001fa0 <__ssputs_r+0x84>
 8001f2e:	898a      	ldrh	r2, [r1, #12]
 8001f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f34:	d032      	beq.n	8001f9c <__ssputs_r+0x80>
 8001f36:	6825      	ldr	r5, [r4, #0]
 8001f38:	6909      	ldr	r1, [r1, #16]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	eba5 0901 	sub.w	r9, r5, r1
 8001f40:	6965      	ldr	r5, [r4, #20]
 8001f42:	444b      	add	r3, r9
 8001f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f4c:	106d      	asrs	r5, r5, #1
 8001f4e:	429d      	cmp	r5, r3
 8001f50:	bf38      	it	cc
 8001f52:	461d      	movcc	r5, r3
 8001f54:	0553      	lsls	r3, r2, #21
 8001f56:	d531      	bpl.n	8001fbc <__ssputs_r+0xa0>
 8001f58:	4629      	mov	r1, r5
 8001f5a:	f000 fb6f 	bl	800263c <_malloc_r>
 8001f5e:	4606      	mov	r6, r0
 8001f60:	b950      	cbnz	r0, 8001f78 <__ssputs_r+0x5c>
 8001f62:	230c      	movs	r3, #12
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f8ca 3000 	str.w	r3, [sl]
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f72:	81a3      	strh	r3, [r4, #12]
 8001f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f78:	464a      	mov	r2, r9
 8001f7a:	6921      	ldr	r1, [r4, #16]
 8001f7c:	f000 face 	bl	800251c <memcpy>
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8a:	81a3      	strh	r3, [r4, #12]
 8001f8c:	6126      	str	r6, [r4, #16]
 8001f8e:	444e      	add	r6, r9
 8001f90:	6026      	str	r6, [r4, #0]
 8001f92:	463e      	mov	r6, r7
 8001f94:	6165      	str	r5, [r4, #20]
 8001f96:	eba5 0509 	sub.w	r5, r5, r9
 8001f9a:	60a5      	str	r5, [r4, #8]
 8001f9c:	42be      	cmp	r6, r7
 8001f9e:	d900      	bls.n	8001fa2 <__ssputs_r+0x86>
 8001fa0:	463e      	mov	r6, r7
 8001fa2:	4632      	mov	r2, r6
 8001fa4:	4641      	mov	r1, r8
 8001fa6:	6820      	ldr	r0, [r4, #0]
 8001fa8:	f000 fac6 	bl	8002538 <memmove>
 8001fac:	68a3      	ldr	r3, [r4, #8]
 8001fae:	2000      	movs	r0, #0
 8001fb0:	1b9b      	subs	r3, r3, r6
 8001fb2:	60a3      	str	r3, [r4, #8]
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	4433      	add	r3, r6
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	e7db      	b.n	8001f74 <__ssputs_r+0x58>
 8001fbc:	462a      	mov	r2, r5
 8001fbe:	f000 fbb1 	bl	8002724 <_realloc_r>
 8001fc2:	4606      	mov	r6, r0
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d1e1      	bne.n	8001f8c <__ssputs_r+0x70>
 8001fc8:	4650      	mov	r0, sl
 8001fca:	6921      	ldr	r1, [r4, #16]
 8001fcc:	f000 face 	bl	800256c <_free_r>
 8001fd0:	e7c7      	b.n	8001f62 <__ssputs_r+0x46>
	...

08001fd4 <_svfiprintf_r>:
 8001fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd8:	4698      	mov	r8, r3
 8001fda:	898b      	ldrh	r3, [r1, #12]
 8001fdc:	4607      	mov	r7, r0
 8001fde:	061b      	lsls	r3, r3, #24
 8001fe0:	460d      	mov	r5, r1
 8001fe2:	4614      	mov	r4, r2
 8001fe4:	b09d      	sub	sp, #116	; 0x74
 8001fe6:	d50e      	bpl.n	8002006 <_svfiprintf_r+0x32>
 8001fe8:	690b      	ldr	r3, [r1, #16]
 8001fea:	b963      	cbnz	r3, 8002006 <_svfiprintf_r+0x32>
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	f000 fb25 	bl	800263c <_malloc_r>
 8001ff2:	6028      	str	r0, [r5, #0]
 8001ff4:	6128      	str	r0, [r5, #16]
 8001ff6:	b920      	cbnz	r0, 8002002 <_svfiprintf_r+0x2e>
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	e0d1      	b.n	80021a6 <_svfiprintf_r+0x1d2>
 8002002:	2340      	movs	r3, #64	; 0x40
 8002004:	616b      	str	r3, [r5, #20]
 8002006:	2300      	movs	r3, #0
 8002008:	9309      	str	r3, [sp, #36]	; 0x24
 800200a:	2320      	movs	r3, #32
 800200c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002010:	2330      	movs	r3, #48	; 0x30
 8002012:	f04f 0901 	mov.w	r9, #1
 8002016:	f8cd 800c 	str.w	r8, [sp, #12]
 800201a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80021c0 <_svfiprintf_r+0x1ec>
 800201e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002022:	4623      	mov	r3, r4
 8002024:	469a      	mov	sl, r3
 8002026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800202a:	b10a      	cbz	r2, 8002030 <_svfiprintf_r+0x5c>
 800202c:	2a25      	cmp	r2, #37	; 0x25
 800202e:	d1f9      	bne.n	8002024 <_svfiprintf_r+0x50>
 8002030:	ebba 0b04 	subs.w	fp, sl, r4
 8002034:	d00b      	beq.n	800204e <_svfiprintf_r+0x7a>
 8002036:	465b      	mov	r3, fp
 8002038:	4622      	mov	r2, r4
 800203a:	4629      	mov	r1, r5
 800203c:	4638      	mov	r0, r7
 800203e:	f7ff ff6d 	bl	8001f1c <__ssputs_r>
 8002042:	3001      	adds	r0, #1
 8002044:	f000 80aa 	beq.w	800219c <_svfiprintf_r+0x1c8>
 8002048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800204a:	445a      	add	r2, fp
 800204c:	9209      	str	r2, [sp, #36]	; 0x24
 800204e:	f89a 3000 	ldrb.w	r3, [sl]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80a2 	beq.w	800219c <_svfiprintf_r+0x1c8>
 8002058:	2300      	movs	r3, #0
 800205a:	f04f 32ff 	mov.w	r2, #4294967295
 800205e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002062:	f10a 0a01 	add.w	sl, sl, #1
 8002066:	9304      	str	r3, [sp, #16]
 8002068:	9307      	str	r3, [sp, #28]
 800206a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800206e:	931a      	str	r3, [sp, #104]	; 0x68
 8002070:	4654      	mov	r4, sl
 8002072:	2205      	movs	r2, #5
 8002074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002078:	4851      	ldr	r0, [pc, #324]	; (80021c0 <_svfiprintf_r+0x1ec>)
 800207a:	f000 fa41 	bl	8002500 <memchr>
 800207e:	9a04      	ldr	r2, [sp, #16]
 8002080:	b9d8      	cbnz	r0, 80020ba <_svfiprintf_r+0xe6>
 8002082:	06d0      	lsls	r0, r2, #27
 8002084:	bf44      	itt	mi
 8002086:	2320      	movmi	r3, #32
 8002088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800208c:	0711      	lsls	r1, r2, #28
 800208e:	bf44      	itt	mi
 8002090:	232b      	movmi	r3, #43	; 0x2b
 8002092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002096:	f89a 3000 	ldrb.w	r3, [sl]
 800209a:	2b2a      	cmp	r3, #42	; 0x2a
 800209c:	d015      	beq.n	80020ca <_svfiprintf_r+0xf6>
 800209e:	4654      	mov	r4, sl
 80020a0:	2000      	movs	r0, #0
 80020a2:	f04f 0c0a 	mov.w	ip, #10
 80020a6:	9a07      	ldr	r2, [sp, #28]
 80020a8:	4621      	mov	r1, r4
 80020aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020ae:	3b30      	subs	r3, #48	; 0x30
 80020b0:	2b09      	cmp	r3, #9
 80020b2:	d94e      	bls.n	8002152 <_svfiprintf_r+0x17e>
 80020b4:	b1b0      	cbz	r0, 80020e4 <_svfiprintf_r+0x110>
 80020b6:	9207      	str	r2, [sp, #28]
 80020b8:	e014      	b.n	80020e4 <_svfiprintf_r+0x110>
 80020ba:	eba0 0308 	sub.w	r3, r0, r8
 80020be:	fa09 f303 	lsl.w	r3, r9, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	46a2      	mov	sl, r4
 80020c6:	9304      	str	r3, [sp, #16]
 80020c8:	e7d2      	b.n	8002070 <_svfiprintf_r+0x9c>
 80020ca:	9b03      	ldr	r3, [sp, #12]
 80020cc:	1d19      	adds	r1, r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	9103      	str	r1, [sp, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bfbb      	ittet	lt
 80020d6:	425b      	neglt	r3, r3
 80020d8:	f042 0202 	orrlt.w	r2, r2, #2
 80020dc:	9307      	strge	r3, [sp, #28]
 80020de:	9307      	strlt	r3, [sp, #28]
 80020e0:	bfb8      	it	lt
 80020e2:	9204      	strlt	r2, [sp, #16]
 80020e4:	7823      	ldrb	r3, [r4, #0]
 80020e6:	2b2e      	cmp	r3, #46	; 0x2e
 80020e8:	d10c      	bne.n	8002104 <_svfiprintf_r+0x130>
 80020ea:	7863      	ldrb	r3, [r4, #1]
 80020ec:	2b2a      	cmp	r3, #42	; 0x2a
 80020ee:	d135      	bne.n	800215c <_svfiprintf_r+0x188>
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	3402      	adds	r4, #2
 80020f4:	1d1a      	adds	r2, r3, #4
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	9203      	str	r2, [sp, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bfb8      	it	lt
 80020fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8002102:	9305      	str	r3, [sp, #20]
 8002104:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80021c4 <_svfiprintf_r+0x1f0>
 8002108:	2203      	movs	r2, #3
 800210a:	4650      	mov	r0, sl
 800210c:	7821      	ldrb	r1, [r4, #0]
 800210e:	f000 f9f7 	bl	8002500 <memchr>
 8002112:	b140      	cbz	r0, 8002126 <_svfiprintf_r+0x152>
 8002114:	2340      	movs	r3, #64	; 0x40
 8002116:	eba0 000a 	sub.w	r0, r0, sl
 800211a:	fa03 f000 	lsl.w	r0, r3, r0
 800211e:	9b04      	ldr	r3, [sp, #16]
 8002120:	3401      	adds	r4, #1
 8002122:	4303      	orrs	r3, r0
 8002124:	9304      	str	r3, [sp, #16]
 8002126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800212a:	2206      	movs	r2, #6
 800212c:	4826      	ldr	r0, [pc, #152]	; (80021c8 <_svfiprintf_r+0x1f4>)
 800212e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002132:	f000 f9e5 	bl	8002500 <memchr>
 8002136:	2800      	cmp	r0, #0
 8002138:	d038      	beq.n	80021ac <_svfiprintf_r+0x1d8>
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <_svfiprintf_r+0x1f8>)
 800213c:	bb1b      	cbnz	r3, 8002186 <_svfiprintf_r+0x1b2>
 800213e:	9b03      	ldr	r3, [sp, #12]
 8002140:	3307      	adds	r3, #7
 8002142:	f023 0307 	bic.w	r3, r3, #7
 8002146:	3308      	adds	r3, #8
 8002148:	9303      	str	r3, [sp, #12]
 800214a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800214c:	4433      	add	r3, r6
 800214e:	9309      	str	r3, [sp, #36]	; 0x24
 8002150:	e767      	b.n	8002022 <_svfiprintf_r+0x4e>
 8002152:	460c      	mov	r4, r1
 8002154:	2001      	movs	r0, #1
 8002156:	fb0c 3202 	mla	r2, ip, r2, r3
 800215a:	e7a5      	b.n	80020a8 <_svfiprintf_r+0xd4>
 800215c:	2300      	movs	r3, #0
 800215e:	f04f 0c0a 	mov.w	ip, #10
 8002162:	4619      	mov	r1, r3
 8002164:	3401      	adds	r4, #1
 8002166:	9305      	str	r3, [sp, #20]
 8002168:	4620      	mov	r0, r4
 800216a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800216e:	3a30      	subs	r2, #48	; 0x30
 8002170:	2a09      	cmp	r2, #9
 8002172:	d903      	bls.n	800217c <_svfiprintf_r+0x1a8>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0c5      	beq.n	8002104 <_svfiprintf_r+0x130>
 8002178:	9105      	str	r1, [sp, #20]
 800217a:	e7c3      	b.n	8002104 <_svfiprintf_r+0x130>
 800217c:	4604      	mov	r4, r0
 800217e:	2301      	movs	r3, #1
 8002180:	fb0c 2101 	mla	r1, ip, r1, r2
 8002184:	e7f0      	b.n	8002168 <_svfiprintf_r+0x194>
 8002186:	ab03      	add	r3, sp, #12
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	462a      	mov	r2, r5
 800218c:	4638      	mov	r0, r7
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <_svfiprintf_r+0x1fc>)
 8002190:	a904      	add	r1, sp, #16
 8002192:	f3af 8000 	nop.w
 8002196:	1c42      	adds	r2, r0, #1
 8002198:	4606      	mov	r6, r0
 800219a:	d1d6      	bne.n	800214a <_svfiprintf_r+0x176>
 800219c:	89ab      	ldrh	r3, [r5, #12]
 800219e:	065b      	lsls	r3, r3, #25
 80021a0:	f53f af2c 	bmi.w	8001ffc <_svfiprintf_r+0x28>
 80021a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021a6:	b01d      	add	sp, #116	; 0x74
 80021a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ac:	ab03      	add	r3, sp, #12
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	462a      	mov	r2, r5
 80021b2:	4638      	mov	r0, r7
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <_svfiprintf_r+0x1fc>)
 80021b6:	a904      	add	r1, sp, #16
 80021b8:	f000 f87c 	bl	80022b4 <_printf_i>
 80021bc:	e7eb      	b.n	8002196 <_svfiprintf_r+0x1c2>
 80021be:	bf00      	nop
 80021c0:	08002844 	.word	0x08002844
 80021c4:	0800284a 	.word	0x0800284a
 80021c8:	0800284e 	.word	0x0800284e
 80021cc:	00000000 	.word	0x00000000
 80021d0:	08001f1d 	.word	0x08001f1d

080021d4 <_printf_common>:
 80021d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021d8:	4616      	mov	r6, r2
 80021da:	4699      	mov	r9, r3
 80021dc:	688a      	ldr	r2, [r1, #8]
 80021de:	690b      	ldr	r3, [r1, #16]
 80021e0:	4607      	mov	r7, r0
 80021e2:	4293      	cmp	r3, r2
 80021e4:	bfb8      	it	lt
 80021e6:	4613      	movlt	r3, r2
 80021e8:	6033      	str	r3, [r6, #0]
 80021ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021ee:	460c      	mov	r4, r1
 80021f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021f4:	b10a      	cbz	r2, 80021fa <_printf_common+0x26>
 80021f6:	3301      	adds	r3, #1
 80021f8:	6033      	str	r3, [r6, #0]
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	0699      	lsls	r1, r3, #26
 80021fe:	bf42      	ittt	mi
 8002200:	6833      	ldrmi	r3, [r6, #0]
 8002202:	3302      	addmi	r3, #2
 8002204:	6033      	strmi	r3, [r6, #0]
 8002206:	6825      	ldr	r5, [r4, #0]
 8002208:	f015 0506 	ands.w	r5, r5, #6
 800220c:	d106      	bne.n	800221c <_printf_common+0x48>
 800220e:	f104 0a19 	add.w	sl, r4, #25
 8002212:	68e3      	ldr	r3, [r4, #12]
 8002214:	6832      	ldr	r2, [r6, #0]
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	42ab      	cmp	r3, r5
 800221a:	dc28      	bgt.n	800226e <_printf_common+0x9a>
 800221c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002220:	1e13      	subs	r3, r2, #0
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	bf18      	it	ne
 8002226:	2301      	movne	r3, #1
 8002228:	0692      	lsls	r2, r2, #26
 800222a:	d42d      	bmi.n	8002288 <_printf_common+0xb4>
 800222c:	4649      	mov	r1, r9
 800222e:	4638      	mov	r0, r7
 8002230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002234:	47c0      	blx	r8
 8002236:	3001      	adds	r0, #1
 8002238:	d020      	beq.n	800227c <_printf_common+0xa8>
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	68e5      	ldr	r5, [r4, #12]
 800223e:	f003 0306 	and.w	r3, r3, #6
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf18      	it	ne
 8002246:	2500      	movne	r5, #0
 8002248:	6832      	ldr	r2, [r6, #0]
 800224a:	f04f 0600 	mov.w	r6, #0
 800224e:	68a3      	ldr	r3, [r4, #8]
 8002250:	bf08      	it	eq
 8002252:	1aad      	subeq	r5, r5, r2
 8002254:	6922      	ldr	r2, [r4, #16]
 8002256:	bf08      	it	eq
 8002258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800225c:	4293      	cmp	r3, r2
 800225e:	bfc4      	itt	gt
 8002260:	1a9b      	subgt	r3, r3, r2
 8002262:	18ed      	addgt	r5, r5, r3
 8002264:	341a      	adds	r4, #26
 8002266:	42b5      	cmp	r5, r6
 8002268:	d11a      	bne.n	80022a0 <_printf_common+0xcc>
 800226a:	2000      	movs	r0, #0
 800226c:	e008      	b.n	8002280 <_printf_common+0xac>
 800226e:	2301      	movs	r3, #1
 8002270:	4652      	mov	r2, sl
 8002272:	4649      	mov	r1, r9
 8002274:	4638      	mov	r0, r7
 8002276:	47c0      	blx	r8
 8002278:	3001      	adds	r0, #1
 800227a:	d103      	bne.n	8002284 <_printf_common+0xb0>
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002284:	3501      	adds	r5, #1
 8002286:	e7c4      	b.n	8002212 <_printf_common+0x3e>
 8002288:	2030      	movs	r0, #48	; 0x30
 800228a:	18e1      	adds	r1, r4, r3
 800228c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002296:	4422      	add	r2, r4
 8002298:	3302      	adds	r3, #2
 800229a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800229e:	e7c5      	b.n	800222c <_printf_common+0x58>
 80022a0:	2301      	movs	r3, #1
 80022a2:	4622      	mov	r2, r4
 80022a4:	4649      	mov	r1, r9
 80022a6:	4638      	mov	r0, r7
 80022a8:	47c0      	blx	r8
 80022aa:	3001      	adds	r0, #1
 80022ac:	d0e6      	beq.n	800227c <_printf_common+0xa8>
 80022ae:	3601      	adds	r6, #1
 80022b0:	e7d9      	b.n	8002266 <_printf_common+0x92>
	...

080022b4 <_printf_i>:
 80022b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022b8:	7e0f      	ldrb	r7, [r1, #24]
 80022ba:	4691      	mov	r9, r2
 80022bc:	2f78      	cmp	r7, #120	; 0x78
 80022be:	4680      	mov	r8, r0
 80022c0:	460c      	mov	r4, r1
 80022c2:	469a      	mov	sl, r3
 80022c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022ca:	d807      	bhi.n	80022dc <_printf_i+0x28>
 80022cc:	2f62      	cmp	r7, #98	; 0x62
 80022ce:	d80a      	bhi.n	80022e6 <_printf_i+0x32>
 80022d0:	2f00      	cmp	r7, #0
 80022d2:	f000 80d9 	beq.w	8002488 <_printf_i+0x1d4>
 80022d6:	2f58      	cmp	r7, #88	; 0x58
 80022d8:	f000 80a4 	beq.w	8002424 <_printf_i+0x170>
 80022dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022e4:	e03a      	b.n	800235c <_printf_i+0xa8>
 80022e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022ea:	2b15      	cmp	r3, #21
 80022ec:	d8f6      	bhi.n	80022dc <_printf_i+0x28>
 80022ee:	a101      	add	r1, pc, #4	; (adr r1, 80022f4 <_printf_i+0x40>)
 80022f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022f4:	0800234d 	.word	0x0800234d
 80022f8:	08002361 	.word	0x08002361
 80022fc:	080022dd 	.word	0x080022dd
 8002300:	080022dd 	.word	0x080022dd
 8002304:	080022dd 	.word	0x080022dd
 8002308:	080022dd 	.word	0x080022dd
 800230c:	08002361 	.word	0x08002361
 8002310:	080022dd 	.word	0x080022dd
 8002314:	080022dd 	.word	0x080022dd
 8002318:	080022dd 	.word	0x080022dd
 800231c:	080022dd 	.word	0x080022dd
 8002320:	0800246f 	.word	0x0800246f
 8002324:	08002391 	.word	0x08002391
 8002328:	08002451 	.word	0x08002451
 800232c:	080022dd 	.word	0x080022dd
 8002330:	080022dd 	.word	0x080022dd
 8002334:	08002491 	.word	0x08002491
 8002338:	080022dd 	.word	0x080022dd
 800233c:	08002391 	.word	0x08002391
 8002340:	080022dd 	.word	0x080022dd
 8002344:	080022dd 	.word	0x080022dd
 8002348:	08002459 	.word	0x08002459
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	1d1a      	adds	r2, r3, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	602a      	str	r2, [r5, #0]
 8002354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800235c:	2301      	movs	r3, #1
 800235e:	e0a4      	b.n	80024aa <_printf_i+0x1f6>
 8002360:	6820      	ldr	r0, [r4, #0]
 8002362:	6829      	ldr	r1, [r5, #0]
 8002364:	0606      	lsls	r6, r0, #24
 8002366:	f101 0304 	add.w	r3, r1, #4
 800236a:	d50a      	bpl.n	8002382 <_printf_i+0xce>
 800236c:	680e      	ldr	r6, [r1, #0]
 800236e:	602b      	str	r3, [r5, #0]
 8002370:	2e00      	cmp	r6, #0
 8002372:	da03      	bge.n	800237c <_printf_i+0xc8>
 8002374:	232d      	movs	r3, #45	; 0x2d
 8002376:	4276      	negs	r6, r6
 8002378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800237c:	230a      	movs	r3, #10
 800237e:	485e      	ldr	r0, [pc, #376]	; (80024f8 <_printf_i+0x244>)
 8002380:	e019      	b.n	80023b6 <_printf_i+0x102>
 8002382:	680e      	ldr	r6, [r1, #0]
 8002384:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002388:	602b      	str	r3, [r5, #0]
 800238a:	bf18      	it	ne
 800238c:	b236      	sxthne	r6, r6
 800238e:	e7ef      	b.n	8002370 <_printf_i+0xbc>
 8002390:	682b      	ldr	r3, [r5, #0]
 8002392:	6820      	ldr	r0, [r4, #0]
 8002394:	1d19      	adds	r1, r3, #4
 8002396:	6029      	str	r1, [r5, #0]
 8002398:	0601      	lsls	r1, r0, #24
 800239a:	d501      	bpl.n	80023a0 <_printf_i+0xec>
 800239c:	681e      	ldr	r6, [r3, #0]
 800239e:	e002      	b.n	80023a6 <_printf_i+0xf2>
 80023a0:	0646      	lsls	r6, r0, #25
 80023a2:	d5fb      	bpl.n	800239c <_printf_i+0xe8>
 80023a4:	881e      	ldrh	r6, [r3, #0]
 80023a6:	2f6f      	cmp	r7, #111	; 0x6f
 80023a8:	bf0c      	ite	eq
 80023aa:	2308      	moveq	r3, #8
 80023ac:	230a      	movne	r3, #10
 80023ae:	4852      	ldr	r0, [pc, #328]	; (80024f8 <_printf_i+0x244>)
 80023b0:	2100      	movs	r1, #0
 80023b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023b6:	6865      	ldr	r5, [r4, #4]
 80023b8:	2d00      	cmp	r5, #0
 80023ba:	bfa8      	it	ge
 80023bc:	6821      	ldrge	r1, [r4, #0]
 80023be:	60a5      	str	r5, [r4, #8]
 80023c0:	bfa4      	itt	ge
 80023c2:	f021 0104 	bicge.w	r1, r1, #4
 80023c6:	6021      	strge	r1, [r4, #0]
 80023c8:	b90e      	cbnz	r6, 80023ce <_printf_i+0x11a>
 80023ca:	2d00      	cmp	r5, #0
 80023cc:	d04d      	beq.n	800246a <_printf_i+0x1b6>
 80023ce:	4615      	mov	r5, r2
 80023d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80023d4:	fb03 6711 	mls	r7, r3, r1, r6
 80023d8:	5dc7      	ldrb	r7, [r0, r7]
 80023da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023de:	4637      	mov	r7, r6
 80023e0:	42bb      	cmp	r3, r7
 80023e2:	460e      	mov	r6, r1
 80023e4:	d9f4      	bls.n	80023d0 <_printf_i+0x11c>
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d10b      	bne.n	8002402 <_printf_i+0x14e>
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	07de      	lsls	r6, r3, #31
 80023ee:	d508      	bpl.n	8002402 <_printf_i+0x14e>
 80023f0:	6923      	ldr	r3, [r4, #16]
 80023f2:	6861      	ldr	r1, [r4, #4]
 80023f4:	4299      	cmp	r1, r3
 80023f6:	bfde      	ittt	le
 80023f8:	2330      	movle	r3, #48	; 0x30
 80023fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002402:	1b52      	subs	r2, r2, r5
 8002404:	6122      	str	r2, [r4, #16]
 8002406:	464b      	mov	r3, r9
 8002408:	4621      	mov	r1, r4
 800240a:	4640      	mov	r0, r8
 800240c:	f8cd a000 	str.w	sl, [sp]
 8002410:	aa03      	add	r2, sp, #12
 8002412:	f7ff fedf 	bl	80021d4 <_printf_common>
 8002416:	3001      	adds	r0, #1
 8002418:	d14c      	bne.n	80024b4 <_printf_i+0x200>
 800241a:	f04f 30ff 	mov.w	r0, #4294967295
 800241e:	b004      	add	sp, #16
 8002420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002424:	4834      	ldr	r0, [pc, #208]	; (80024f8 <_printf_i+0x244>)
 8002426:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800242a:	6829      	ldr	r1, [r5, #0]
 800242c:	6823      	ldr	r3, [r4, #0]
 800242e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002432:	6029      	str	r1, [r5, #0]
 8002434:	061d      	lsls	r5, r3, #24
 8002436:	d514      	bpl.n	8002462 <_printf_i+0x1ae>
 8002438:	07df      	lsls	r7, r3, #31
 800243a:	bf44      	itt	mi
 800243c:	f043 0320 	orrmi.w	r3, r3, #32
 8002440:	6023      	strmi	r3, [r4, #0]
 8002442:	b91e      	cbnz	r6, 800244c <_printf_i+0x198>
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	f023 0320 	bic.w	r3, r3, #32
 800244a:	6023      	str	r3, [r4, #0]
 800244c:	2310      	movs	r3, #16
 800244e:	e7af      	b.n	80023b0 <_printf_i+0xfc>
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	f043 0320 	orr.w	r3, r3, #32
 8002456:	6023      	str	r3, [r4, #0]
 8002458:	2378      	movs	r3, #120	; 0x78
 800245a:	4828      	ldr	r0, [pc, #160]	; (80024fc <_printf_i+0x248>)
 800245c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002460:	e7e3      	b.n	800242a <_printf_i+0x176>
 8002462:	0659      	lsls	r1, r3, #25
 8002464:	bf48      	it	mi
 8002466:	b2b6      	uxthmi	r6, r6
 8002468:	e7e6      	b.n	8002438 <_printf_i+0x184>
 800246a:	4615      	mov	r5, r2
 800246c:	e7bb      	b.n	80023e6 <_printf_i+0x132>
 800246e:	682b      	ldr	r3, [r5, #0]
 8002470:	6826      	ldr	r6, [r4, #0]
 8002472:	1d18      	adds	r0, r3, #4
 8002474:	6961      	ldr	r1, [r4, #20]
 8002476:	6028      	str	r0, [r5, #0]
 8002478:	0635      	lsls	r5, r6, #24
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	d501      	bpl.n	8002482 <_printf_i+0x1ce>
 800247e:	6019      	str	r1, [r3, #0]
 8002480:	e002      	b.n	8002488 <_printf_i+0x1d4>
 8002482:	0670      	lsls	r0, r6, #25
 8002484:	d5fb      	bpl.n	800247e <_printf_i+0x1ca>
 8002486:	8019      	strh	r1, [r3, #0]
 8002488:	2300      	movs	r3, #0
 800248a:	4615      	mov	r5, r2
 800248c:	6123      	str	r3, [r4, #16]
 800248e:	e7ba      	b.n	8002406 <_printf_i+0x152>
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	2100      	movs	r1, #0
 8002494:	1d1a      	adds	r2, r3, #4
 8002496:	602a      	str	r2, [r5, #0]
 8002498:	681d      	ldr	r5, [r3, #0]
 800249a:	6862      	ldr	r2, [r4, #4]
 800249c:	4628      	mov	r0, r5
 800249e:	f000 f82f 	bl	8002500 <memchr>
 80024a2:	b108      	cbz	r0, 80024a8 <_printf_i+0x1f4>
 80024a4:	1b40      	subs	r0, r0, r5
 80024a6:	6060      	str	r0, [r4, #4]
 80024a8:	6863      	ldr	r3, [r4, #4]
 80024aa:	6123      	str	r3, [r4, #16]
 80024ac:	2300      	movs	r3, #0
 80024ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024b2:	e7a8      	b.n	8002406 <_printf_i+0x152>
 80024b4:	462a      	mov	r2, r5
 80024b6:	4649      	mov	r1, r9
 80024b8:	4640      	mov	r0, r8
 80024ba:	6923      	ldr	r3, [r4, #16]
 80024bc:	47d0      	blx	sl
 80024be:	3001      	adds	r0, #1
 80024c0:	d0ab      	beq.n	800241a <_printf_i+0x166>
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	079b      	lsls	r3, r3, #30
 80024c6:	d413      	bmi.n	80024f0 <_printf_i+0x23c>
 80024c8:	68e0      	ldr	r0, [r4, #12]
 80024ca:	9b03      	ldr	r3, [sp, #12]
 80024cc:	4298      	cmp	r0, r3
 80024ce:	bfb8      	it	lt
 80024d0:	4618      	movlt	r0, r3
 80024d2:	e7a4      	b.n	800241e <_printf_i+0x16a>
 80024d4:	2301      	movs	r3, #1
 80024d6:	4632      	mov	r2, r6
 80024d8:	4649      	mov	r1, r9
 80024da:	4640      	mov	r0, r8
 80024dc:	47d0      	blx	sl
 80024de:	3001      	adds	r0, #1
 80024e0:	d09b      	beq.n	800241a <_printf_i+0x166>
 80024e2:	3501      	adds	r5, #1
 80024e4:	68e3      	ldr	r3, [r4, #12]
 80024e6:	9903      	ldr	r1, [sp, #12]
 80024e8:	1a5b      	subs	r3, r3, r1
 80024ea:	42ab      	cmp	r3, r5
 80024ec:	dcf2      	bgt.n	80024d4 <_printf_i+0x220>
 80024ee:	e7eb      	b.n	80024c8 <_printf_i+0x214>
 80024f0:	2500      	movs	r5, #0
 80024f2:	f104 0619 	add.w	r6, r4, #25
 80024f6:	e7f5      	b.n	80024e4 <_printf_i+0x230>
 80024f8:	08002855 	.word	0x08002855
 80024fc:	08002866 	.word	0x08002866

08002500 <memchr>:
 8002500:	4603      	mov	r3, r0
 8002502:	b510      	push	{r4, lr}
 8002504:	b2c9      	uxtb	r1, r1
 8002506:	4402      	add	r2, r0
 8002508:	4293      	cmp	r3, r2
 800250a:	4618      	mov	r0, r3
 800250c:	d101      	bne.n	8002512 <memchr+0x12>
 800250e:	2000      	movs	r0, #0
 8002510:	e003      	b.n	800251a <memchr+0x1a>
 8002512:	7804      	ldrb	r4, [r0, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	428c      	cmp	r4, r1
 8002518:	d1f6      	bne.n	8002508 <memchr+0x8>
 800251a:	bd10      	pop	{r4, pc}

0800251c <memcpy>:
 800251c:	440a      	add	r2, r1
 800251e:	4291      	cmp	r1, r2
 8002520:	f100 33ff 	add.w	r3, r0, #4294967295
 8002524:	d100      	bne.n	8002528 <memcpy+0xc>
 8002526:	4770      	bx	lr
 8002528:	b510      	push	{r4, lr}
 800252a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800252e:	4291      	cmp	r1, r2
 8002530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002534:	d1f9      	bne.n	800252a <memcpy+0xe>
 8002536:	bd10      	pop	{r4, pc}

08002538 <memmove>:
 8002538:	4288      	cmp	r0, r1
 800253a:	b510      	push	{r4, lr}
 800253c:	eb01 0402 	add.w	r4, r1, r2
 8002540:	d902      	bls.n	8002548 <memmove+0x10>
 8002542:	4284      	cmp	r4, r0
 8002544:	4623      	mov	r3, r4
 8002546:	d807      	bhi.n	8002558 <memmove+0x20>
 8002548:	1e43      	subs	r3, r0, #1
 800254a:	42a1      	cmp	r1, r4
 800254c:	d008      	beq.n	8002560 <memmove+0x28>
 800254e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002556:	e7f8      	b.n	800254a <memmove+0x12>
 8002558:	4601      	mov	r1, r0
 800255a:	4402      	add	r2, r0
 800255c:	428a      	cmp	r2, r1
 800255e:	d100      	bne.n	8002562 <memmove+0x2a>
 8002560:	bd10      	pop	{r4, pc}
 8002562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800256a:	e7f7      	b.n	800255c <memmove+0x24>

0800256c <_free_r>:
 800256c:	b538      	push	{r3, r4, r5, lr}
 800256e:	4605      	mov	r5, r0
 8002570:	2900      	cmp	r1, #0
 8002572:	d040      	beq.n	80025f6 <_free_r+0x8a>
 8002574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002578:	1f0c      	subs	r4, r1, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfb8      	it	lt
 800257e:	18e4      	addlt	r4, r4, r3
 8002580:	f000 f910 	bl	80027a4 <__malloc_lock>
 8002584:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <_free_r+0x8c>)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	b933      	cbnz	r3, 8002598 <_free_r+0x2c>
 800258a:	6063      	str	r3, [r4, #4]
 800258c:	6014      	str	r4, [r2, #0]
 800258e:	4628      	mov	r0, r5
 8002590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002594:	f000 b90c 	b.w	80027b0 <__malloc_unlock>
 8002598:	42a3      	cmp	r3, r4
 800259a:	d908      	bls.n	80025ae <_free_r+0x42>
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	1821      	adds	r1, r4, r0
 80025a0:	428b      	cmp	r3, r1
 80025a2:	bf01      	itttt	eq
 80025a4:	6819      	ldreq	r1, [r3, #0]
 80025a6:	685b      	ldreq	r3, [r3, #4]
 80025a8:	1809      	addeq	r1, r1, r0
 80025aa:	6021      	streq	r1, [r4, #0]
 80025ac:	e7ed      	b.n	800258a <_free_r+0x1e>
 80025ae:	461a      	mov	r2, r3
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	b10b      	cbz	r3, 80025b8 <_free_r+0x4c>
 80025b4:	42a3      	cmp	r3, r4
 80025b6:	d9fa      	bls.n	80025ae <_free_r+0x42>
 80025b8:	6811      	ldr	r1, [r2, #0]
 80025ba:	1850      	adds	r0, r2, r1
 80025bc:	42a0      	cmp	r0, r4
 80025be:	d10b      	bne.n	80025d8 <_free_r+0x6c>
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	4401      	add	r1, r0
 80025c4:	1850      	adds	r0, r2, r1
 80025c6:	4283      	cmp	r3, r0
 80025c8:	6011      	str	r1, [r2, #0]
 80025ca:	d1e0      	bne.n	800258e <_free_r+0x22>
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4401      	add	r1, r0
 80025d2:	6011      	str	r1, [r2, #0]
 80025d4:	6053      	str	r3, [r2, #4]
 80025d6:	e7da      	b.n	800258e <_free_r+0x22>
 80025d8:	d902      	bls.n	80025e0 <_free_r+0x74>
 80025da:	230c      	movs	r3, #12
 80025dc:	602b      	str	r3, [r5, #0]
 80025de:	e7d6      	b.n	800258e <_free_r+0x22>
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	1821      	adds	r1, r4, r0
 80025e4:	428b      	cmp	r3, r1
 80025e6:	bf01      	itttt	eq
 80025e8:	6819      	ldreq	r1, [r3, #0]
 80025ea:	685b      	ldreq	r3, [r3, #4]
 80025ec:	1809      	addeq	r1, r1, r0
 80025ee:	6021      	streq	r1, [r4, #0]
 80025f0:	6063      	str	r3, [r4, #4]
 80025f2:	6054      	str	r4, [r2, #4]
 80025f4:	e7cb      	b.n	800258e <_free_r+0x22>
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	200000d0 	.word	0x200000d0

080025fc <sbrk_aligned>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	4e0e      	ldr	r6, [pc, #56]	; (8002638 <sbrk_aligned+0x3c>)
 8002600:	460c      	mov	r4, r1
 8002602:	6831      	ldr	r1, [r6, #0]
 8002604:	4605      	mov	r5, r0
 8002606:	b911      	cbnz	r1, 800260e <sbrk_aligned+0x12>
 8002608:	f000 f8bc 	bl	8002784 <_sbrk_r>
 800260c:	6030      	str	r0, [r6, #0]
 800260e:	4621      	mov	r1, r4
 8002610:	4628      	mov	r0, r5
 8002612:	f000 f8b7 	bl	8002784 <_sbrk_r>
 8002616:	1c43      	adds	r3, r0, #1
 8002618:	d00a      	beq.n	8002630 <sbrk_aligned+0x34>
 800261a:	1cc4      	adds	r4, r0, #3
 800261c:	f024 0403 	bic.w	r4, r4, #3
 8002620:	42a0      	cmp	r0, r4
 8002622:	d007      	beq.n	8002634 <sbrk_aligned+0x38>
 8002624:	1a21      	subs	r1, r4, r0
 8002626:	4628      	mov	r0, r5
 8002628:	f000 f8ac 	bl	8002784 <_sbrk_r>
 800262c:	3001      	adds	r0, #1
 800262e:	d101      	bne.n	8002634 <sbrk_aligned+0x38>
 8002630:	f04f 34ff 	mov.w	r4, #4294967295
 8002634:	4620      	mov	r0, r4
 8002636:	bd70      	pop	{r4, r5, r6, pc}
 8002638:	200000d4 	.word	0x200000d4

0800263c <_malloc_r>:
 800263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002640:	1ccd      	adds	r5, r1, #3
 8002642:	f025 0503 	bic.w	r5, r5, #3
 8002646:	3508      	adds	r5, #8
 8002648:	2d0c      	cmp	r5, #12
 800264a:	bf38      	it	cc
 800264c:	250c      	movcc	r5, #12
 800264e:	2d00      	cmp	r5, #0
 8002650:	4607      	mov	r7, r0
 8002652:	db01      	blt.n	8002658 <_malloc_r+0x1c>
 8002654:	42a9      	cmp	r1, r5
 8002656:	d905      	bls.n	8002664 <_malloc_r+0x28>
 8002658:	230c      	movs	r3, #12
 800265a:	2600      	movs	r6, #0
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4630      	mov	r0, r6
 8002660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002664:	4e2e      	ldr	r6, [pc, #184]	; (8002720 <_malloc_r+0xe4>)
 8002666:	f000 f89d 	bl	80027a4 <__malloc_lock>
 800266a:	6833      	ldr	r3, [r6, #0]
 800266c:	461c      	mov	r4, r3
 800266e:	bb34      	cbnz	r4, 80026be <_malloc_r+0x82>
 8002670:	4629      	mov	r1, r5
 8002672:	4638      	mov	r0, r7
 8002674:	f7ff ffc2 	bl	80025fc <sbrk_aligned>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	4604      	mov	r4, r0
 800267c:	d14d      	bne.n	800271a <_malloc_r+0xde>
 800267e:	6834      	ldr	r4, [r6, #0]
 8002680:	4626      	mov	r6, r4
 8002682:	2e00      	cmp	r6, #0
 8002684:	d140      	bne.n	8002708 <_malloc_r+0xcc>
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	4631      	mov	r1, r6
 800268a:	4638      	mov	r0, r7
 800268c:	eb04 0803 	add.w	r8, r4, r3
 8002690:	f000 f878 	bl	8002784 <_sbrk_r>
 8002694:	4580      	cmp	r8, r0
 8002696:	d13a      	bne.n	800270e <_malloc_r+0xd2>
 8002698:	6821      	ldr	r1, [r4, #0]
 800269a:	3503      	adds	r5, #3
 800269c:	1a6d      	subs	r5, r5, r1
 800269e:	f025 0503 	bic.w	r5, r5, #3
 80026a2:	3508      	adds	r5, #8
 80026a4:	2d0c      	cmp	r5, #12
 80026a6:	bf38      	it	cc
 80026a8:	250c      	movcc	r5, #12
 80026aa:	4638      	mov	r0, r7
 80026ac:	4629      	mov	r1, r5
 80026ae:	f7ff ffa5 	bl	80025fc <sbrk_aligned>
 80026b2:	3001      	adds	r0, #1
 80026b4:	d02b      	beq.n	800270e <_malloc_r+0xd2>
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	442b      	add	r3, r5
 80026ba:	6023      	str	r3, [r4, #0]
 80026bc:	e00e      	b.n	80026dc <_malloc_r+0xa0>
 80026be:	6822      	ldr	r2, [r4, #0]
 80026c0:	1b52      	subs	r2, r2, r5
 80026c2:	d41e      	bmi.n	8002702 <_malloc_r+0xc6>
 80026c4:	2a0b      	cmp	r2, #11
 80026c6:	d916      	bls.n	80026f6 <_malloc_r+0xba>
 80026c8:	1961      	adds	r1, r4, r5
 80026ca:	42a3      	cmp	r3, r4
 80026cc:	6025      	str	r5, [r4, #0]
 80026ce:	bf18      	it	ne
 80026d0:	6059      	strne	r1, [r3, #4]
 80026d2:	6863      	ldr	r3, [r4, #4]
 80026d4:	bf08      	it	eq
 80026d6:	6031      	streq	r1, [r6, #0]
 80026d8:	5162      	str	r2, [r4, r5]
 80026da:	604b      	str	r3, [r1, #4]
 80026dc:	4638      	mov	r0, r7
 80026de:	f104 060b 	add.w	r6, r4, #11
 80026e2:	f000 f865 	bl	80027b0 <__malloc_unlock>
 80026e6:	f026 0607 	bic.w	r6, r6, #7
 80026ea:	1d23      	adds	r3, r4, #4
 80026ec:	1af2      	subs	r2, r6, r3
 80026ee:	d0b6      	beq.n	800265e <_malloc_r+0x22>
 80026f0:	1b9b      	subs	r3, r3, r6
 80026f2:	50a3      	str	r3, [r4, r2]
 80026f4:	e7b3      	b.n	800265e <_malloc_r+0x22>
 80026f6:	6862      	ldr	r2, [r4, #4]
 80026f8:	42a3      	cmp	r3, r4
 80026fa:	bf0c      	ite	eq
 80026fc:	6032      	streq	r2, [r6, #0]
 80026fe:	605a      	strne	r2, [r3, #4]
 8002700:	e7ec      	b.n	80026dc <_malloc_r+0xa0>
 8002702:	4623      	mov	r3, r4
 8002704:	6864      	ldr	r4, [r4, #4]
 8002706:	e7b2      	b.n	800266e <_malloc_r+0x32>
 8002708:	4634      	mov	r4, r6
 800270a:	6876      	ldr	r6, [r6, #4]
 800270c:	e7b9      	b.n	8002682 <_malloc_r+0x46>
 800270e:	230c      	movs	r3, #12
 8002710:	4638      	mov	r0, r7
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	f000 f84c 	bl	80027b0 <__malloc_unlock>
 8002718:	e7a1      	b.n	800265e <_malloc_r+0x22>
 800271a:	6025      	str	r5, [r4, #0]
 800271c:	e7de      	b.n	80026dc <_malloc_r+0xa0>
 800271e:	bf00      	nop
 8002720:	200000d0 	.word	0x200000d0

08002724 <_realloc_r>:
 8002724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002728:	4680      	mov	r8, r0
 800272a:	4614      	mov	r4, r2
 800272c:	460e      	mov	r6, r1
 800272e:	b921      	cbnz	r1, 800273a <_realloc_r+0x16>
 8002730:	4611      	mov	r1, r2
 8002732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002736:	f7ff bf81 	b.w	800263c <_malloc_r>
 800273a:	b92a      	cbnz	r2, 8002748 <_realloc_r+0x24>
 800273c:	f7ff ff16 	bl	800256c <_free_r>
 8002740:	4625      	mov	r5, r4
 8002742:	4628      	mov	r0, r5
 8002744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002748:	f000 f838 	bl	80027bc <_malloc_usable_size_r>
 800274c:	4284      	cmp	r4, r0
 800274e:	4607      	mov	r7, r0
 8002750:	d802      	bhi.n	8002758 <_realloc_r+0x34>
 8002752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002756:	d812      	bhi.n	800277e <_realloc_r+0x5a>
 8002758:	4621      	mov	r1, r4
 800275a:	4640      	mov	r0, r8
 800275c:	f7ff ff6e 	bl	800263c <_malloc_r>
 8002760:	4605      	mov	r5, r0
 8002762:	2800      	cmp	r0, #0
 8002764:	d0ed      	beq.n	8002742 <_realloc_r+0x1e>
 8002766:	42bc      	cmp	r4, r7
 8002768:	4622      	mov	r2, r4
 800276a:	4631      	mov	r1, r6
 800276c:	bf28      	it	cs
 800276e:	463a      	movcs	r2, r7
 8002770:	f7ff fed4 	bl	800251c <memcpy>
 8002774:	4631      	mov	r1, r6
 8002776:	4640      	mov	r0, r8
 8002778:	f7ff fef8 	bl	800256c <_free_r>
 800277c:	e7e1      	b.n	8002742 <_realloc_r+0x1e>
 800277e:	4635      	mov	r5, r6
 8002780:	e7df      	b.n	8002742 <_realloc_r+0x1e>
	...

08002784 <_sbrk_r>:
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	2300      	movs	r3, #0
 8002788:	4d05      	ldr	r5, [pc, #20]	; (80027a0 <_sbrk_r+0x1c>)
 800278a:	4604      	mov	r4, r0
 800278c:	4608      	mov	r0, r1
 800278e:	602b      	str	r3, [r5, #0]
 8002790:	f7fd fe6c 	bl	800046c <_sbrk>
 8002794:	1c43      	adds	r3, r0, #1
 8002796:	d102      	bne.n	800279e <_sbrk_r+0x1a>
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	b103      	cbz	r3, 800279e <_sbrk_r+0x1a>
 800279c:	6023      	str	r3, [r4, #0]
 800279e:	bd38      	pop	{r3, r4, r5, pc}
 80027a0:	200000d8 	.word	0x200000d8

080027a4 <__malloc_lock>:
 80027a4:	4801      	ldr	r0, [pc, #4]	; (80027ac <__malloc_lock+0x8>)
 80027a6:	f000 b811 	b.w	80027cc <__retarget_lock_acquire_recursive>
 80027aa:	bf00      	nop
 80027ac:	200000dc 	.word	0x200000dc

080027b0 <__malloc_unlock>:
 80027b0:	4801      	ldr	r0, [pc, #4]	; (80027b8 <__malloc_unlock+0x8>)
 80027b2:	f000 b80c 	b.w	80027ce <__retarget_lock_release_recursive>
 80027b6:	bf00      	nop
 80027b8:	200000dc 	.word	0x200000dc

080027bc <_malloc_usable_size_r>:
 80027bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027c0:	1f18      	subs	r0, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bfbc      	itt	lt
 80027c6:	580b      	ldrlt	r3, [r1, r0]
 80027c8:	18c0      	addlt	r0, r0, r3
 80027ca:	4770      	bx	lr

080027cc <__retarget_lock_acquire_recursive>:
 80027cc:	4770      	bx	lr

080027ce <__retarget_lock_release_recursive>:
 80027ce:	4770      	bx	lr

080027d0 <_init>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr

080027dc <_fini>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr
