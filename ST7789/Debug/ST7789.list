
ST7789.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008e34  08001dbc  08001dbc  00011dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf0  0800abf0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800abf0  0800abf0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abf0  0800abf0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abf4  0800abf4  0001abf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800abf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000014  0800ac0c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  0800ac0c  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061fd  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d6  00000000  00000000  0002623a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001611f  00000000  00000000  00027db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00007243  00000000  00000000  0003decf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0007e09b  00000000  00000000  00045112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000c31ad  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000005e0  00000000  00000000  000c3200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001954  00000000  00000000  000c37e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001da4 	.word	0x08001da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001da4 	.word	0x08001da4

0800014c <main>:
{0x8208,0x35A5,0xB6B5,0x76AD,0xF49C,0xF49C,0xF39C,0x9294,0xD394,0xD394,0xD394,0xD394,0xD394,0xD394,0xD394,0xD394,0xD39C,0xD39C,0xD39C,0xD39C,0xF39C,0xF39C,0x13A5,0xF39C,0x14A5,0x14A5,0x14A5,0xF39C,0xB294,0xB294,0xD39C,0xD39C,0xD39C,0xD394,0xF39C,0xF39C,0xD29C,0x7294,0xD39C,0x7294,0x9294,0xB39C,0x9294,0xD39C,0xF39C,0xF39C,0xF39C,0xF39C,0x14A5,0xF49C,0xF39C,0xB394,0xB294,0xD39C,0xF49C,0xD39C,0xD294,0xD394,0xD39C,0xD39C,0xD39C,0xD39C,0xD39C,0xF39C,0xD394,0xD39C,0xD39C,0xD39C,0xD39C,0xD39C,0xD39C,0xF39C,0xD29C,0xB294,0x9294,0x9194,0x718C,0x9194,0xD29C,0xF3A4,0x339D,0x139D,0xD29C,0xB29C,0x7194,0x7194,0xB294,0x13A5,0xF39C,0xF39C,0x9194,0xB29C,0xB29C,0xB29C,0xD29C,0x13A5,0x13A5,0x9194,0xB294,0xF39C,0xF39C,0xF39C,0xF3A4,0x13A5,0x13A5,0xF39C,0x13A5,0x13A5,0xD29C,0xD29C,0xF39C,0xD29C,0xF39C,0xF39C,0xF39C,0xD29C,0x9194,0xF39C,0x308C,0x508C,0xEF83,0x518C,0x518C,0x929C,0x34AD,0x34AD,0xB29C,0x8210,},
{0x0000,0x6208,0x0000,0x4108,0x0000,0x2100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2000,0x0000,0x0000,0x2000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2000,0x0000,0x2000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2000,0x2000,0x2000,0x0000,0x2000,0x0000,0x0000,0x0000,0x0000,0x2000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2000,0x0000,0x2000,0x2000,0x0000,0x0000,0x2008,0x0000,0x0000,0x2000,0x2000,0x0000,0x0000,0x2008,0x0000,0x0000,0x0000,0x2000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2008,0x2000,0x0000,0x0000,0x0000,0x0000,0x4008,0x0000,0x2000,0x2000,0x0000,0x0000,0x0000,0x0000,0x2008,0x0000,0x0000,0x0000,0x8210,0x0000,},
};

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af04      	add	r7, sp, #16
  HAL_Init();
 8000152:	f000 fca7 	bl	8000aa4 <HAL_Init>
  SystemClock_Config();
 8000156:	f000 f827 	bl	80001a8 <SystemClock_Config>
  MX_GPIO_Init();
 800015a:	f000 f8a1 	bl	80002a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f869 	bl	8000234 <MX_SPI1_Init>

  ST7789_Init();
 8000162:	f000 fa09 	bl	8000578 <ST7789_Init>
  ST7789_WriteString(0, 5, "La puerca esta en la pocilga", Font_11x18, GREEN, BLACK);
 8000166:	4b0d      	ldr	r3, [pc, #52]	; (800019c <main+0x50>)
 8000168:	2200      	movs	r2, #0
 800016a:	9202      	str	r2, [sp, #8]
 800016c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000170:	9201      	str	r2, [sp, #4]
 8000172:	685a      	ldr	r2, [r3, #4]
 8000174:	9200      	str	r2, [sp, #0]
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <main+0x54>)
 800017a:	2105      	movs	r1, #5
 800017c:	2000      	movs	r0, #0
 800017e:	f000 fb84 	bl	800088a <ST7789_WriteString>
	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <main+0x58>)
 8000184:	9300      	str	r3, [sp, #0]
 8000186:	2380      	movs	r3, #128	; 0x80
 8000188:	2280      	movs	r2, #128	; 0x80
 800018a:	2100      	movs	r1, #0
 800018c:	2000      	movs	r0, #0
 800018e:	f000 fac2 	bl	8000716 <ST7789_DrawImage>
	HAL_Delay(3000);
 8000192:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000196:	f000 fce7 	bl	8000b68 <HAL_Delay>
  while (1)
 800019a:	e7fe      	b.n	800019a <main+0x4e>
 800019c:	20000000 	.word	0x20000000
 80001a0:	08001dbc 	.word	0x08001dbc
 80001a4:	08002be0 	.word	0x08002be0

080001a8 <SystemClock_Config>:
  {
  }
}

void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	; 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	; 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 fdec 	bl	8001d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ca:	2301      	movs	r3, #1
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001dc:	2302      	movs	r3, #2
 80001de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 ff5d 	bl	80010b0 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001fc:	f000 f8d2 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f9ca 	bl	80015b4 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000226:	f000 f8bd 	bl	80003a4 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	; 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <MX_SPI1_Init+0x64>)
 800023a:	4a18      	ldr	r2, [pc, #96]	; (800029c <MX_SPI1_Init+0x68>)
 800023c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800023e:	4b16      	ldr	r3, [pc, #88]	; (8000298 <MX_SPI1_Init+0x64>)
 8000240:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_SPI1_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <MX_SPI1_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <MX_SPI1_Init+0x64>)
 8000254:	2202      	movs	r2, #2
 8000256:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000258:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_SPI1_Init+0x64>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <MX_SPI1_Init+0x64>)
 8000260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000264:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <MX_SPI1_Init+0x64>)
 8000268:	2208      	movs	r2, #8
 800026a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <MX_SPI1_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <MX_SPI1_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <MX_SPI1_Init+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <MX_SPI1_Init+0x64>)
 8000280:	220a      	movs	r2, #10
 8000282:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <MX_SPI1_Init+0x64>)
 8000286:	f001 fafb 	bl	8001880 <HAL_SPI_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000290:	f000 f888 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000030 	.word	0x20000030
 800029c:	40013000 	.word	0x40013000

080002a0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0310 	add.w	r3, r7, #16
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b4:	4b37      	ldr	r3, [pc, #220]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a36      	ldr	r2, [pc, #216]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002ba:	f043 0310 	orr.w	r3, r3, #16
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b34      	ldr	r3, [pc, #208]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0310 	and.w	r3, r3, #16
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002cc:	4b31      	ldr	r3, [pc, #196]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a30      	ldr	r2, [pc, #192]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b2e      	ldr	r3, [pc, #184]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a2a      	ldr	r2, [pc, #168]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b28      	ldr	r3, [pc, #160]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <MX_GPIO_Init+0xf4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a24      	ldr	r2, [pc, #144]	; (8000394 <MX_GPIO_Init+0xf4>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_GPIO_Init+0xf4>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	603b      	str	r3, [r7, #0]
 8000312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031a:	481f      	ldr	r0, [pc, #124]	; (8000398 <MX_GPIO_Init+0xf8>)
 800031c:	f000 feb0 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2140      	movs	r1, #64	; 0x40
 8000324:	481d      	ldr	r0, [pc, #116]	; (800039c <MX_GPIO_Init+0xfc>)
 8000326:	f000 feab 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2101      	movs	r1, #1
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_GPIO_Init+0x100>)
 8000330:	f000 fea6 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	4812      	ldr	r0, [pc, #72]	; (8000398 <MX_GPIO_Init+0xf8>)
 800034e:	f000 fd13 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin;
 8000352:	2340      	movs	r3, #64	; 0x40
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2302      	movs	r3, #2
 8000360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST7789_RST_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <MX_GPIO_Init+0xfc>)
 800036a:	f000 fd05 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_DC_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin;
 800036e:	2301      	movs	r3, #1
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2302      	movs	r3, #2
 800037c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST7789_DC_GPIO_Port, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_GPIO_Init+0x100>)
 8000386:	f000 fcf7 	bl	8000d78 <HAL_GPIO_Init>

}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40011000 	.word	0x40011000
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <Error_Handler>:

void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80003ba:	bf00      	nop
	ST7789_DC_Clr();
 80003bc:	2200      	movs	r2, #0
 80003be:	2101      	movs	r1, #1
 80003c0:	4807      	ldr	r0, [pc, #28]	; (80003e0 <ST7789_WriteCommand+0x30>)
 80003c2:	f000 fe5d 	bl	8001080 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80003c6:	1df9      	adds	r1, r7, #7
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
 80003cc:	2201      	movs	r2, #1
 80003ce:	4805      	ldr	r0, [pc, #20]	; (80003e4 <ST7789_WriteCommand+0x34>)
 80003d0:	f001 fada 	bl	8001988 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80003d4:	bf00      	nop
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010c00 	.word	0x40010c00
 80003e4:	20000030 	.word	0x20000030

080003e8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80003f2:	bf00      	nop
	ST7789_DC_Set();
 80003f4:	2201      	movs	r2, #1
 80003f6:	2101      	movs	r1, #1
 80003f8:	4810      	ldr	r0, [pc, #64]	; (800043c <ST7789_WriteData+0x54>)
 80003fa:	f000 fe41 	bl	8001080 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80003fe:	e015      	b.n	800042c <ST7789_WriteData+0x44>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000406:	4293      	cmp	r3, r2
 8000408:	bf28      	it	cs
 800040a:	4613      	movcs	r3, r2
 800040c:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800040e:	89fa      	ldrh	r2, [r7, #14]
 8000410:	f04f 33ff 	mov.w	r3, #4294967295
 8000414:	6879      	ldr	r1, [r7, #4]
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <ST7789_WriteData+0x58>)
 8000418:	f001 fab6 	bl	8001988 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 800041c:	89fb      	ldrh	r3, [r7, #14]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	4413      	add	r3, r2
 8000422:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8000424:	89fb      	ldrh	r3, [r7, #14]
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1e6      	bne.n	8000400 <ST7789_WriteData+0x18>
	}

	ST7789_UnSelect();
 8000432:	bf00      	nop
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40010c00 	.word	0x40010c00
 8000440:	20000030 	.word	0x20000030

08000444 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800044e:	bf00      	nop
	ST7789_DC_Set();
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	4807      	ldr	r0, [pc, #28]	; (8000474 <ST7789_WriteSmallData+0x30>)
 8000456:	f000 fe13 	bl	8001080 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 800045a:	1df9      	adds	r1, r7, #7
 800045c:	f04f 33ff 	mov.w	r3, #4294967295
 8000460:	2201      	movs	r2, #1
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <ST7789_WriteSmallData+0x34>)
 8000464:	f001 fa90 	bl	8001988 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000468:	bf00      	nop
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010c00 	.word	0x40010c00
 8000478:	20000030 	.word	0x20000030

0800047c <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000486:	2036      	movs	r0, #54	; 0x36
 8000488:	f7ff ff92 	bl	80003b0 <ST7789_WriteCommand>
	switch (m) {
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d81a      	bhi.n	80004c8 <ST7789_SetRotation+0x4c>
 8000492:	a201      	add	r2, pc, #4	; (adr r2, 8000498 <ST7789_SetRotation+0x1c>)
 8000494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000498:	080004a9 	.word	0x080004a9
 800049c:	080004b1 	.word	0x080004b1
 80004a0:	080004b9 	.word	0x080004b9
 80004a4:	080004c1 	.word	0x080004c1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80004a8:	20c0      	movs	r0, #192	; 0xc0
 80004aa:	f7ff ffcb 	bl	8000444 <ST7789_WriteSmallData>
		break;
 80004ae:	e00c      	b.n	80004ca <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80004b0:	20a0      	movs	r0, #160	; 0xa0
 80004b2:	f7ff ffc7 	bl	8000444 <ST7789_WriteSmallData>
		break;
 80004b6:	e008      	b.n	80004ca <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80004b8:	2000      	movs	r0, #0
 80004ba:	f7ff ffc3 	bl	8000444 <ST7789_WriteSmallData>
		break;
 80004be:	e004      	b.n	80004ca <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80004c0:	2060      	movs	r0, #96	; 0x60
 80004c2:	f7ff ffbf 	bl	8000444 <ST7789_WriteSmallData>
		break;
 80004c6:	e000      	b.n	80004ca <ST7789_SetRotation+0x4e>
	default:
		break;
 80004c8:	bf00      	nop
	}
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop

080004d4 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4604      	mov	r4, r0
 80004dc:	4608      	mov	r0, r1
 80004de:	4611      	mov	r1, r2
 80004e0:	461a      	mov	r2, r3
 80004e2:	4623      	mov	r3, r4
 80004e4:	80fb      	strh	r3, [r7, #6]
 80004e6:	4603      	mov	r3, r0
 80004e8:	80bb      	strh	r3, [r7, #4]
 80004ea:	460b      	mov	r3, r1
 80004ec:	807b      	strh	r3, [r7, #2]
 80004ee:	4613      	mov	r3, r2
 80004f0:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80004f2:	bf00      	nop
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	82fb      	strh	r3, [r7, #22]
 80004f8:	887b      	ldrh	r3, [r7, #2]
 80004fa:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80004fc:	88bb      	ldrh	r3, [r7, #4]
 80004fe:	827b      	strh	r3, [r7, #18]
 8000500:	883b      	ldrh	r3, [r7, #0]
 8000502:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8000504:	202a      	movs	r0, #42	; 0x2a
 8000506:	f7ff ff53 	bl	80003b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 800050a:	8afb      	ldrh	r3, [r7, #22]
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	b29b      	uxth	r3, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	733b      	strb	r3, [r7, #12]
 8000514:	8afb      	ldrh	r3, [r7, #22]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	737b      	strb	r3, [r7, #13]
 800051a:	8abb      	ldrh	r3, [r7, #20]
 800051c:	0a1b      	lsrs	r3, r3, #8
 800051e:	b29b      	uxth	r3, r3
 8000520:	b2db      	uxtb	r3, r3
 8000522:	73bb      	strb	r3, [r7, #14]
 8000524:	8abb      	ldrh	r3, [r7, #20]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	2104      	movs	r1, #4
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff59 	bl	80003e8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000536:	202b      	movs	r0, #43	; 0x2b
 8000538:	f7ff ff3a 	bl	80003b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800053c:	8a7b      	ldrh	r3, [r7, #18]
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	b29b      	uxth	r3, r3
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
 8000546:	8a7b      	ldrh	r3, [r7, #18]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	727b      	strb	r3, [r7, #9]
 800054c:	8a3b      	ldrh	r3, [r7, #16]
 800054e:	0a1b      	lsrs	r3, r3, #8
 8000550:	b29b      	uxth	r3, r3
 8000552:	b2db      	uxtb	r3, r3
 8000554:	72bb      	strb	r3, [r7, #10]
 8000556:	8a3b      	ldrh	r3, [r7, #16]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	2104      	movs	r1, #4
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff40 	bl	80003e8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000568:	202c      	movs	r0, #44	; 0x2c
 800056a:	f7ff ff21 	bl	80003b0 <ST7789_WriteCommand>
	ST7789_UnSelect();
 800056e:	bf00      	nop
}
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd90      	pop	{r4, r7, pc}

08000578 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b08b      	sub	sp, #44	; 0x2c
 800057c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800057e:	2019      	movs	r0, #25
 8000580:	f000 faf2 	bl	8000b68 <HAL_Delay>
    ST7789_RST_Clr();
 8000584:	2200      	movs	r2, #0
 8000586:	2140      	movs	r1, #64	; 0x40
 8000588:	4846      	ldr	r0, [pc, #280]	; (80006a4 <ST7789_Init+0x12c>)
 800058a:	f000 fd79 	bl	8001080 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800058e:	2019      	movs	r0, #25
 8000590:	f000 faea 	bl	8000b68 <HAL_Delay>
    ST7789_RST_Set();
 8000594:	2201      	movs	r2, #1
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	4842      	ldr	r0, [pc, #264]	; (80006a4 <ST7789_Init+0x12c>)
 800059a:	f000 fd71 	bl	8001080 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800059e:	2032      	movs	r0, #50	; 0x32
 80005a0:	f000 fae2 	bl	8000b68 <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80005a4:	203a      	movs	r0, #58	; 0x3a
 80005a6:	f7ff ff03 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 80005aa:	2055      	movs	r0, #85	; 0x55
 80005ac:	f7ff ff4a 	bl	8000444 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80005b0:	20b2      	movs	r0, #178	; 0xb2
 80005b2:	f7ff fefd 	bl	80003b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80005b6:	4a3c      	ldr	r2, [pc, #240]	; (80006a8 <ST7789_Init+0x130>)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c0:	6018      	str	r0, [r3, #0]
 80005c2:	3304      	adds	r3, #4
 80005c4:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff0b 	bl	80003e8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff ff52 	bl	800047c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80005d8:	20b7      	movs	r0, #183	; 0xb7
 80005da:	f7ff fee9 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80005de:	2035      	movs	r0, #53	; 0x35
 80005e0:	f7ff ff30 	bl	8000444 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80005e4:	20bb      	movs	r0, #187	; 0xbb
 80005e6:	f7ff fee3 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80005ea:	2019      	movs	r0, #25
 80005ec:	f7ff ff2a 	bl	8000444 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80005f0:	20c0      	movs	r0, #192	; 0xc0
 80005f2:	f7ff fedd 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80005f6:	202c      	movs	r0, #44	; 0x2c
 80005f8:	f7ff ff24 	bl	8000444 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80005fc:	20c2      	movs	r0, #194	; 0xc2
 80005fe:	f7ff fed7 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff ff1e 	bl	8000444 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000608:	20c3      	movs	r0, #195	; 0xc3
 800060a:	f7ff fed1 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 800060e:	2012      	movs	r0, #18
 8000610:	f7ff ff18 	bl	8000444 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000614:	20c4      	movs	r0, #196	; 0xc4
 8000616:	f7ff fecb 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800061a:	2020      	movs	r0, #32
 800061c:	f7ff ff12 	bl	8000444 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000620:	20c6      	movs	r0, #198	; 0xc6
 8000622:	f7ff fec5 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000626:	200f      	movs	r0, #15
 8000628:	f7ff ff0c 	bl	8000444 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800062c:	20d0      	movs	r0, #208	; 0xd0
 800062e:	f7ff febf 	bl	80003b0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000632:	20a4      	movs	r0, #164	; 0xa4
 8000634:	f7ff ff06 	bl	8000444 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000638:	20a1      	movs	r0, #161	; 0xa1
 800063a:	f7ff ff03 	bl	8000444 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800063e:	20e0      	movs	r0, #224	; 0xe0
 8000640:	f7ff feb6 	bl	80003b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <ST7789_Init+0x134>)
 8000646:	f107 0410 	add.w	r4, r7, #16
 800064a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064c:	c407      	stmia	r4!, {r0, r1, r2}
 800064e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	210e      	movs	r1, #14
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fec6 	bl	80003e8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800065c:	20e1      	movs	r0, #225	; 0xe1
 800065e:	f7ff fea7 	bl	80003b0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <ST7789_Init+0x138>)
 8000664:	463c      	mov	r4, r7
 8000666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000668:	c407      	stmia	r4!, {r0, r1, r2}
 800066a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800066c:	463b      	mov	r3, r7
 800066e:	210e      	movs	r1, #14
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff feb9 	bl	80003e8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000676:	2021      	movs	r0, #33	; 0x21
 8000678:	f7ff fe9a 	bl	80003b0 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800067c:	2011      	movs	r0, #17
 800067e:	f7ff fe97 	bl	80003b0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000682:	2013      	movs	r0, #19
 8000684:	f7ff fe94 	bl	80003b0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8000688:	2029      	movs	r0, #41	; 0x29
 800068a:	f7ff fe91 	bl	80003b0 <ST7789_WriteCommand>

	HAL_Delay(50);
 800068e:	2032      	movs	r0, #50	; 0x32
 8000690:	f000 fa6a 	bl	8000b68 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8000694:	2000      	movs	r0, #0
 8000696:	f000 f80d 	bl	80006b4 <ST7789_Fill_Color>
}
 800069a:	bf00      	nop
 800069c:	372c      	adds	r7, #44	; 0x2c
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd90      	pop	{r4, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40010800 	.word	0x40010800
 80006a8:	08001ddc 	.word	0x08001ddc
 80006ac:	08001de4 	.word	0x08001de4
 80006b0:	08001df4 	.word	0x08001df4

080006b4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80006be:	23ef      	movs	r3, #239	; 0xef
 80006c0:	22ef      	movs	r2, #239	; 0xef
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ff05 	bl	80004d4 <ST7789_SetAddressWindow>
	ST7789_Select();
 80006ca:	bf00      	nop
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	81fb      	strh	r3, [r7, #14]
 80006d0:	e019      	b.n	8000706 <ST7789_Fill_Color+0x52>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	81bb      	strh	r3, [r7, #12]
 80006d6:	e010      	b.n	80006fa <ST7789_Fill_Color+0x46>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	0a1b      	lsrs	r3, r3, #8
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	723b      	strb	r3, [r7, #8]
 80006e2:	88fb      	ldrh	r3, [r7, #6]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fe7a 	bl	80003e8 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80006f4:	89bb      	ldrh	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	81bb      	strh	r3, [r7, #12]
 80006fa:	89bb      	ldrh	r3, [r7, #12]
 80006fc:	2bef      	cmp	r3, #239	; 0xef
 80006fe:	d9eb      	bls.n	80006d8 <ST7789_Fill_Color+0x24>
		for (i = 0; i < ST7789_WIDTH; i++)
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	3301      	adds	r3, #1
 8000704:	81fb      	strh	r3, [r7, #14]
 8000706:	89fb      	ldrh	r3, [r7, #14]
 8000708:	2bef      	cmp	r3, #239	; 0xef
 800070a:	d9e2      	bls.n	80006d2 <ST7789_Fill_Color+0x1e>
				}
	#endif
	ST7789_UnSelect();
 800070c:	bf00      	nop
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <ST7789_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
{
 8000716:	b590      	push	{r4, r7, lr}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	4604      	mov	r4, r0
 800071e:	4608      	mov	r0, r1
 8000720:	4611      	mov	r1, r2
 8000722:	461a      	mov	r2, r3
 8000724:	4623      	mov	r3, r4
 8000726:	80fb      	strh	r3, [r7, #6]
 8000728:	4603      	mov	r3, r0
 800072a:	80bb      	strh	r3, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	803b      	strh	r3, [r7, #0]
	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	2bef      	cmp	r3, #239	; 0xef
 8000738:	d829      	bhi.n	800078e <ST7789_DrawImage+0x78>
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	2bef      	cmp	r3, #239	; 0xef
 800073e:	d826      	bhi.n	800078e <ST7789_DrawImage+0x78>
		return;
	if ((x + w - 1) >= ST7789_WIDTH)
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	4413      	add	r3, r2
 8000746:	2bf0      	cmp	r3, #240	; 0xf0
 8000748:	dc23      	bgt.n	8000792 <ST7789_DrawImage+0x7c>
		return;
	if ((y + h - 1) >= ST7789_HEIGHT)
 800074a:	88ba      	ldrh	r2, [r7, #4]
 800074c:	883b      	ldrh	r3, [r7, #0]
 800074e:	4413      	add	r3, r2
 8000750:	2bf0      	cmp	r3, #240	; 0xf0
 8000752:	dc20      	bgt.n	8000796 <ST7789_DrawImage+0x80>
		return;

	ST7789_Select();
 8000754:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8000756:	88fa      	ldrh	r2, [r7, #6]
 8000758:	887b      	ldrh	r3, [r7, #2]
 800075a:	4413      	add	r3, r2
 800075c:	b29b      	uxth	r3, r3
 800075e:	3b01      	subs	r3, #1
 8000760:	b29c      	uxth	r4, r3
 8000762:	88ba      	ldrh	r2, [r7, #4]
 8000764:	883b      	ldrh	r3, [r7, #0]
 8000766:	4413      	add	r3, r2
 8000768:	b29b      	uxth	r3, r3
 800076a:	3b01      	subs	r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	88b9      	ldrh	r1, [r7, #4]
 8000770:	88f8      	ldrh	r0, [r7, #6]
 8000772:	4622      	mov	r2, r4
 8000774:	f7ff feae 	bl	80004d4 <ST7789_SetAddressWindow>
	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
 8000778:	887b      	ldrh	r3, [r7, #2]
 800077a:	883a      	ldrh	r2, [r7, #0]
 800077c:	fb02 f303 	mul.w	r3, r2, r3
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4619      	mov	r1, r3
 8000784:	69b8      	ldr	r0, [r7, #24]
 8000786:	f7ff fe2f 	bl	80003e8 <ST7789_WriteData>
	ST7789_UnSelect();
 800078a:	bf00      	nop
 800078c:	e004      	b.n	8000798 <ST7789_DrawImage+0x82>
		return;
 800078e:	bf00      	nop
 8000790:	e002      	b.n	8000798 <ST7789_DrawImage+0x82>
		return;
 8000792:	bf00      	nop
 8000794:	e000      	b.n	8000798 <ST7789_DrawImage+0x82>
		return;
 8000796:	bf00      	nop
}
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}

0800079e <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800079e:	b082      	sub	sp, #8
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
 80007a8:	4603      	mov	r3, r0
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	460b      	mov	r3, r1
 80007ae:	80bb      	strh	r3, [r7, #4]
 80007b0:	4613      	mov	r3, r2
 80007b2:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 80007b4:	bf00      	nop
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80007b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	4413      	add	r3, r2
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	3b01      	subs	r3, #1
 80007c4:	b29c      	uxth	r4, r3
 80007c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	88bb      	ldrh	r3, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	3b01      	subs	r3, #1
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	88b9      	ldrh	r1, [r7, #4]
 80007d8:	88f8      	ldrh	r0, [r7, #6]
 80007da:	4622      	mov	r2, r4
 80007dc:	f7ff fe7a 	bl	80004d4 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
 80007e4:	e043      	b.n	800086e <ST7789_WriteChar+0xd0>
		b = font.data[(ch - 32) * font.height + i];
 80007e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	3b20      	subs	r3, #32
 80007ec:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80007f0:	fb01 f303 	mul.w	r3, r1, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	440b      	add	r3, r1
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	e029      	b.n	800085c <ST7789_WriteChar+0xbe>
			if ((b << j) & 0x8000) {
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00e      	beq.n	8000836 <ST7789_WriteChar+0x98>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000818:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	b29b      	uxth	r3, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	743b      	strb	r3, [r7, #16]
 8000822:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000824:	b2db      	uxtb	r3, r3
 8000826:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fdda 	bl	80003e8 <ST7789_WriteData>
 8000834:	e00f      	b.n	8000856 <ST7789_WriteChar+0xb8>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000836:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b29b      	uxth	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	733b      	strb	r3, [r7, #12]
 8000842:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000846:	b2db      	uxtb	r3, r3
 8000848:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2102      	movs	r1, #2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fdc9 	bl	80003e8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	3301      	adds	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000860:	461a      	mov	r2, r3
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	4293      	cmp	r3, r2
 8000866:	d3cf      	bcc.n	8000808 <ST7789_WriteChar+0x6a>
	for (i = 0; i < font.height; i++) {
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	3301      	adds	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000872:	461a      	mov	r2, r3
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	4293      	cmp	r3, r2
 8000878:	d3b5      	bcc.n	80007e6 <ST7789_WriteChar+0x48>
			}
		}
	}
	ST7789_UnSelect();
 800087a:	bf00      	nop
}
 800087c:	bf00      	nop
 800087e:	3724      	adds	r7, #36	; 0x24
 8000880:	46bd      	mov	sp, r7
 8000882:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000886:	b002      	add	sp, #8
 8000888:	4770      	bx	lr

0800088a <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800088a:	b082      	sub	sp, #8
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af04      	add	r7, sp, #16
 8000892:	603a      	str	r2, [r7, #0]
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
 800089a:	460b      	mov	r3, r1
 800089c:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 800089e:	bf00      	nop
	while (*str) {
 80008a0:	e02d      	b.n	80008fe <ST7789_WriteString+0x74>
		if (x + font.width >= ST7789_WIDTH) {
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	7d3a      	ldrb	r2, [r7, #20]
 80008a6:	4413      	add	r3, r2
 80008a8:	2bef      	cmp	r3, #239	; 0xef
 80008aa:	dd13      	ble.n	80008d4 <ST7789_WriteString+0x4a>
			x = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80008b0:	7d7b      	ldrb	r3, [r7, #21]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	88bb      	ldrh	r3, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 80008ba:	88bb      	ldrh	r3, [r7, #4]
 80008bc:	7d7a      	ldrb	r2, [r7, #21]
 80008be:	4413      	add	r3, r2
 80008c0:	2bef      	cmp	r3, #239	; 0xef
 80008c2:	dc21      	bgt.n	8000908 <ST7789_WriteString+0x7e>
				break;
			}

			if (*str == ' ') {
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b20      	cmp	r3, #32
 80008ca:	d103      	bne.n	80008d4 <ST7789_WriteString+0x4a>
				// skip spaces in the beginning of the new line
				str++;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	3301      	adds	r3, #1
 80008d0:	603b      	str	r3, [r7, #0]
				continue;
 80008d2:	e014      	b.n	80008fe <ST7789_WriteString+0x74>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	88b9      	ldrh	r1, [r7, #4]
 80008da:	88f8      	ldrh	r0, [r7, #6]
 80008dc:	8c3b      	ldrh	r3, [r7, #32]
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	8bbb      	ldrh	r3, [r7, #28]
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f7ff ff58 	bl	800079e <ST7789_WriteChar>
		x += font.width;
 80008ee:	7d3b      	ldrb	r3, [r7, #20]
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	4413      	add	r3, r2
 80008f6:	80fb      	strh	r3, [r7, #6]
		str++;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	603b      	str	r3, [r7, #0]
	while (*str) {
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1cd      	bne.n	80008a2 <ST7789_WriteString+0x18>
 8000906:	e000      	b.n	800090a <ST7789_WriteString+0x80>
				break;
 8000908:	bf00      	nop
	}
	ST7789_UnSelect();
 800090a:	bf00      	nop
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000916:	b002      	add	sp, #8
 8000918:	4770      	bx	lr
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_MspInit+0x5c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a14      	ldr	r2, [pc, #80]	; (8000978 <HAL_MspInit+0x5c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_MspInit+0x5c>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_MspInit+0x5c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x5c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_MspInit+0x60>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_MspInit+0x60>)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	40010000 	.word	0x40010000

08000980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <HAL_SPI_MspInit+0x70>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d123      	bne.n	80009e8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_SPI_MspInit+0x74>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <HAL_SPI_MspInit+0x74>)
 80009a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_SPI_MspInit+0x74>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_SPI_MspInit+0x74>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <HAL_SPI_MspInit+0x74>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_SPI_MspInit+0x74>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7789_SCL_Pin|ST7789_SDA_Pin;
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_SPI_MspInit+0x78>)
 80009e4:	f000 f9c8 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40013000 	.word	0x40013000
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010800 	.word	0x40010800

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 f875 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
	...

08000a58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a7e:	f7ff ffe4 	bl	8000a4a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f001 f963 	bl	8001d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff fb61 	bl	800014c <main>
  bx lr
 8000a8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a94:	0800abf8 	.word	0x0800abf8
  ldr r2, =_sbss
 8000a98:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a9c:	2000008c 	.word	0x2000008c

08000aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_2_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_Init+0x28>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_Init+0x28>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f92b 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	200f      	movs	r0, #15
 8000abc:	f000 f808 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac0:	f7ff ff2c 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40022000 	.word	0x40022000

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f935 	bl	8000d5e <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f000 f90b 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000010 	.word	0x20000010
 8000b2c:	2000000c 	.word	0x2000000c

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <HAL_IncTick+0x20>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000010 	.word	0x20000010
 8000b50:	20000088 	.word	0x20000088

08000b54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <HAL_GetTick+0x10>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000088 	.word	0x20000088

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff fff0 	bl	8000b54 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ffe0 	bl	8000b54 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000010 	.word	0x20000010

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff90 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff49 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff5e 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff90 	bl	8000c68 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5f 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffb0 	bl	8000ccc <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b08b      	sub	sp, #44	; 0x2c
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	e169      	b.n	8001060 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	69fa      	ldr	r2, [r7, #28]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f040 8158 	bne.w	800105a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	4a9a      	ldr	r2, [pc, #616]	; (8001018 <HAL_GPIO_Init+0x2a0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d05e      	beq.n	8000e72 <HAL_GPIO_Init+0xfa>
 8000db4:	4a98      	ldr	r2, [pc, #608]	; (8001018 <HAL_GPIO_Init+0x2a0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d875      	bhi.n	8000ea6 <HAL_GPIO_Init+0x12e>
 8000dba:	4a98      	ldr	r2, [pc, #608]	; (800101c <HAL_GPIO_Init+0x2a4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d058      	beq.n	8000e72 <HAL_GPIO_Init+0xfa>
 8000dc0:	4a96      	ldr	r2, [pc, #600]	; (800101c <HAL_GPIO_Init+0x2a4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d86f      	bhi.n	8000ea6 <HAL_GPIO_Init+0x12e>
 8000dc6:	4a96      	ldr	r2, [pc, #600]	; (8001020 <HAL_GPIO_Init+0x2a8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d052      	beq.n	8000e72 <HAL_GPIO_Init+0xfa>
 8000dcc:	4a94      	ldr	r2, [pc, #592]	; (8001020 <HAL_GPIO_Init+0x2a8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d869      	bhi.n	8000ea6 <HAL_GPIO_Init+0x12e>
 8000dd2:	4a94      	ldr	r2, [pc, #592]	; (8001024 <HAL_GPIO_Init+0x2ac>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d04c      	beq.n	8000e72 <HAL_GPIO_Init+0xfa>
 8000dd8:	4a92      	ldr	r2, [pc, #584]	; (8001024 <HAL_GPIO_Init+0x2ac>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d863      	bhi.n	8000ea6 <HAL_GPIO_Init+0x12e>
 8000dde:	4a92      	ldr	r2, [pc, #584]	; (8001028 <HAL_GPIO_Init+0x2b0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d046      	beq.n	8000e72 <HAL_GPIO_Init+0xfa>
 8000de4:	4a90      	ldr	r2, [pc, #576]	; (8001028 <HAL_GPIO_Init+0x2b0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d85d      	bhi.n	8000ea6 <HAL_GPIO_Init+0x12e>
 8000dea:	2b12      	cmp	r3, #18
 8000dec:	d82a      	bhi.n	8000e44 <HAL_GPIO_Init+0xcc>
 8000dee:	2b12      	cmp	r3, #18
 8000df0:	d859      	bhi.n	8000ea6 <HAL_GPIO_Init+0x12e>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <HAL_GPIO_Init+0x80>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08000e73 	.word	0x08000e73
 8000dfc:	08000e4d 	.word	0x08000e4d
 8000e00:	08000e5f 	.word	0x08000e5f
 8000e04:	08000ea1 	.word	0x08000ea1
 8000e08:	08000ea7 	.word	0x08000ea7
 8000e0c:	08000ea7 	.word	0x08000ea7
 8000e10:	08000ea7 	.word	0x08000ea7
 8000e14:	08000ea7 	.word	0x08000ea7
 8000e18:	08000ea7 	.word	0x08000ea7
 8000e1c:	08000ea7 	.word	0x08000ea7
 8000e20:	08000ea7 	.word	0x08000ea7
 8000e24:	08000ea7 	.word	0x08000ea7
 8000e28:	08000ea7 	.word	0x08000ea7
 8000e2c:	08000ea7 	.word	0x08000ea7
 8000e30:	08000ea7 	.word	0x08000ea7
 8000e34:	08000ea7 	.word	0x08000ea7
 8000e38:	08000ea7 	.word	0x08000ea7
 8000e3c:	08000e55 	.word	0x08000e55
 8000e40:	08000e69 	.word	0x08000e69
 8000e44:	4a79      	ldr	r2, [pc, #484]	; (800102c <HAL_GPIO_Init+0x2b4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e4a:	e02c      	b.n	8000ea6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	623b      	str	r3, [r7, #32]
          break;
 8000e52:	e029      	b.n	8000ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	623b      	str	r3, [r7, #32]
          break;
 8000e5c:	e024      	b.n	8000ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	3308      	adds	r3, #8
 8000e64:	623b      	str	r3, [r7, #32]
          break;
 8000e66:	e01f      	b.n	8000ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	330c      	adds	r3, #12
 8000e6e:	623b      	str	r3, [r7, #32]
          break;
 8000e70:	e01a      	b.n	8000ea8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	623b      	str	r3, [r7, #32]
          break;
 8000e7e:	e013      	b.n	8000ea8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d105      	bne.n	8000e94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	611a      	str	r2, [r3, #16]
          break;
 8000e92:	e009      	b.n	8000ea8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e94:	2308      	movs	r3, #8
 8000e96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	615a      	str	r2, [r3, #20]
          break;
 8000e9e:	e003      	b.n	8000ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x130>
          break;
 8000ea6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2bff      	cmp	r3, #255	; 0xff
 8000eac:	d801      	bhi.n	8000eb2 <HAL_GPIO_Init+0x13a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	e001      	b.n	8000eb6 <HAL_GPIO_Init+0x13e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2bff      	cmp	r3, #255	; 0xff
 8000ebc:	d802      	bhi.n	8000ec4 <HAL_GPIO_Init+0x14c>
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	e002      	b.n	8000eca <HAL_GPIO_Init+0x152>
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	3b08      	subs	r3, #8
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	401a      	ands	r2, r3
 8000edc:	6a39      	ldr	r1, [r7, #32]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 80b1 	beq.w	800105a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef8:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <HAL_GPIO_Init+0x2b8>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <HAL_GPIO_Init+0x2b8>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <HAL_GPIO_Init+0x2b8>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f10:	4a48      	ldr	r2, [pc, #288]	; (8001034 <HAL_GPIO_Init+0x2bc>)
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a40      	ldr	r2, [pc, #256]	; (8001038 <HAL_GPIO_Init+0x2c0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d013      	beq.n	8000f64 <HAL_GPIO_Init+0x1ec>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a3f      	ldr	r2, [pc, #252]	; (800103c <HAL_GPIO_Init+0x2c4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d00d      	beq.n	8000f60 <HAL_GPIO_Init+0x1e8>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3e      	ldr	r2, [pc, #248]	; (8001040 <HAL_GPIO_Init+0x2c8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x1e4>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a3d      	ldr	r2, [pc, #244]	; (8001044 <HAL_GPIO_Init+0x2cc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_GPIO_Init+0x1e0>
 8000f54:	2303      	movs	r3, #3
 8000f56:	e006      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e004      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <HAL_GPIO_Init+0x1ee>
 8000f64:	2300      	movs	r3, #0
 8000f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f68:	f002 0203 	and.w	r2, r2, #3
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	4093      	lsls	r3, r2
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f76:	492f      	ldr	r1, [pc, #188]	; (8001034 <HAL_GPIO_Init+0x2bc>)
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	492c      	ldr	r1, [pc, #176]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	600b      	str	r3, [r1, #0]
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4928      	ldr	r1, [pc, #160]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4922      	ldr	r1, [pc, #136]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	491e      	ldr	r1, [pc, #120]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	4918      	ldr	r1, [pc, #96]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	608b      	str	r3, [r1, #8]
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4914      	ldr	r1, [pc, #80]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d021      	beq.n	800104c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	490e      	ldr	r1, [pc, #56]	; (8001048 <HAL_GPIO_Init+0x2d0>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	60cb      	str	r3, [r1, #12]
 8001014:	e021      	b.n	800105a <HAL_GPIO_Init+0x2e2>
 8001016:	bf00      	nop
 8001018:	10320000 	.word	0x10320000
 800101c:	10310000 	.word	0x10310000
 8001020:	10220000 	.word	0x10220000
 8001024:	10210000 	.word	0x10210000
 8001028:	10120000 	.word	0x10120000
 800102c:	10110000 	.word	0x10110000
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000
 8001038:	40010800 	.word	0x40010800
 800103c:	40010c00 	.word	0x40010c00
 8001040:	40011000 	.word	0x40011000
 8001044:	40011400 	.word	0x40011400
 8001048:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_GPIO_Init+0x304>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	43db      	mvns	r3, r3
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <HAL_GPIO_Init+0x304>)
 8001056:	4013      	ands	r3, r2
 8001058:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	3301      	adds	r3, #1
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	fa22 f303 	lsr.w	r3, r2, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	f47f ae8e 	bne.w	8000d8c <HAL_GPIO_Init+0x14>
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	372c      	adds	r7, #44	; 0x2c
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	611a      	str	r2, [r3, #16]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e272      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8087 	beq.w	80011de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d0:	4b92      	ldr	r3, [pc, #584]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d00c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010dc:	4b8f      	ldr	r3, [pc, #572]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d112      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
 80010e8:	4b8c      	ldr	r3, [pc, #560]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d10b      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	4b89      	ldr	r3, [pc, #548]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d06c      	beq.n	80011dc <HAL_RCC_OscConfig+0x12c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d168      	bne.n	80011dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e24c      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x76>
 8001118:	4b80      	ldr	r3, [pc, #512]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a7f      	ldr	r2, [pc, #508]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e02e      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b7b      	ldr	r3, [pc, #492]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a7a      	ldr	r2, [pc, #488]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b78      	ldr	r3, [pc, #480]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a77      	ldr	r2, [pc, #476]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0xbc>
 8001152:	4b72      	ldr	r3, [pc, #456]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a71      	ldr	r2, [pc, #452]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b6f      	ldr	r3, [pc, #444]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6e      	ldr	r2, [pc, #440]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 800116c:	4b6b      	ldr	r3, [pc, #428]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a6a      	ldr	r2, [pc, #424]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a67      	ldr	r2, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fce2 	bl	8000b54 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fcde 	bl	8000b54 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e200      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b5d      	ldr	r3, [pc, #372]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xe4>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcce 	bl	8000b54 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcca 	bl	8000b54 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1ec      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x10c>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d063      	beq.n	80012b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ea:	4b4c      	ldr	r3, [pc, #304]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
 8001202:	4b46      	ldr	r3, [pc, #280]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1c0      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4939      	ldr	r1, [pc, #228]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e03a      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fc83 	bl	8000b54 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fc7f 	bl	8000b54 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1a1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4927      	ldr	r1, [pc, #156]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc62 	bl	8000b54 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fc5e 	bl	8000b54 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e180      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d03a      	beq.n	8001334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d019      	beq.n	80012fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_RCC_OscConfig+0x274>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc42 	bl	8000b54 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fc3e 	bl	8000b54 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e160      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 faa6 	bl	8001844 <RCC_Delay>
 80012f8:	e01c      	b.n	8001334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_RCC_OscConfig+0x274>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001300:	f7ff fc28 	bl	8000b54 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001306:	e00f      	b.n	8001328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fc24 	bl	8000b54 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d908      	bls.n	8001328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e146      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	42420000 	.word	0x42420000
 8001324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	4b92      	ldr	r3, [pc, #584]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e9      	bne.n	8001308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a6 	beq.w	800148e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b8b      	ldr	r3, [pc, #556]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a87      	ldr	r2, [pc, #540]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b85      	ldr	r3, [pc, #532]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b82      	ldr	r3, [pc, #520]	; (8001578 <HAL_RCC_OscConfig+0x4c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x4c8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7e      	ldr	r2, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x4c8>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fbe5 	bl	8000b54 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fbe1 	bl	8000b54 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b64      	cmp	r3, #100	; 0x64
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e103      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b75      	ldr	r3, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x4c8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x312>
 80013b4:	4b6f      	ldr	r3, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a6e      	ldr	r2, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	e02d      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x334>
 80013ca:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a69      	ldr	r2, [pc, #420]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6213      	str	r3, [r2, #32]
 80013d6:	4b67      	ldr	r3, [pc, #412]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a66      	ldr	r2, [pc, #408]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	e01c      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x356>
 80013ec:	4b61      	ldr	r3, [pc, #388]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6213      	str	r3, [r2, #32]
 80013f8:	4b5e      	ldr	r3, [pc, #376]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a5d      	ldr	r2, [pc, #372]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a5a      	ldr	r2, [pc, #360]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6213      	str	r3, [r2, #32]
 8001412:	4b58      	ldr	r3, [pc, #352]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a57      	ldr	r2, [pc, #348]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb95 	bl	8000b54 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb91 	bl	8000b54 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0b1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ee      	beq.n	800142e <HAL_RCC_OscConfig+0x37e>
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fb7f 	bl	8000b54 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fb7b 	bl	8000b54 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e09b      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a3b      	ldr	r2, [pc, #236]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8087 	beq.w	80015a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d061      	beq.n	8001568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d146      	bne.n	800153a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b33      	ldr	r3, [pc, #204]	; (800157c <HAL_RCC_OscConfig+0x4cc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb4f 	bl	8000b54 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fb4b 	bl	8000b54 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e06d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4921      	ldr	r1, [pc, #132]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a19      	ldr	r1, [r3, #32]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	430b      	orrs	r3, r1
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x4cc>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fb1f 	bl	8000b54 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fb1b 	bl	8000b54 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e03d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x46a>
 8001538:	e035      	b.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x4cc>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb08 	bl	8000b54 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fb04 	bl	8000b54 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e026      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x498>
 8001566:	e01e      	b.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e019      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
 8001574:	40021000 	.word	0x40021000
 8001578:	40007000 	.word	0x40007000
 800157c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	429a      	cmp	r2, r3
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0d0      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b6a      	ldr	r3, [pc, #424]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d910      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 0207 	bic.w	r2, r3, #7
 80015de:	4965      	ldr	r1, [pc, #404]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b63      	ldr	r3, [pc, #396]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0b8      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a58      	ldr	r2, [pc, #352]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800161a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a52      	ldr	r2, [pc, #328]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	494d      	ldr	r1, [pc, #308]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d040      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d115      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e07f      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e073      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e06b      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f023 0203 	bic.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4936      	ldr	r1, [pc, #216]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa56 	bl	8000b54 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff fa52 	bl	8000b54 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e053      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 020c 	and.w	r2, r3, #12
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1eb      	bne.n	80016ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d210      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 0207 	bic.w	r2, r3, #7
 80016ea:	4922      	ldr	r1, [pc, #136]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e032      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4916      	ldr	r1, [pc, #88]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	490e      	ldr	r1, [pc, #56]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001742:	f000 f821 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001746:	4602      	mov	r2, r0
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	490a      	ldr	r1, [pc, #40]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	5ccb      	ldrb	r3, [r1, r3]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1cc>)
 800175c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1d0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f9b4 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40022000 	.word	0x40022000
 8001778:	40021000 	.word	0x40021000
 800177c:	0800abe0 	.word	0x0800abe0
 8001780:	20000008 	.word	0x20000008
 8001784:	2000000c 	.word	0x2000000c

08001788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b490      	push	{r4, r7}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_GetSysClockFreq+0xac>)
 8001790:	1d3c      	adds	r4, r7, #4
 8001792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001798:	f240 2301 	movw	r3, #513	; 0x201
 800179c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x40>
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x46>
 80017c6:	e02b      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017ca:	623b      	str	r3, [r7, #32]
      break;
 80017cc:	e02b      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3328      	adds	r3, #40	; 0x28
 80017d8:	443b      	add	r3, r7
 80017da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d012      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	0c5b      	lsrs	r3, r3, #17
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	3328      	adds	r3, #40	; 0x28
 80017f6:	443b      	add	r3, r7
 80017f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001802:	fb03 f202 	mul.w	r2, r3, r2
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	fbb2 f3f3 	udiv	r3, r2, r3
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
 800180e:	e004      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	623b      	str	r3, [r7, #32]
      break;
 800181e:	e002      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001822:	623b      	str	r3, [r7, #32]
      break;
 8001824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001826:	6a3b      	ldr	r3, [r7, #32]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bc90      	pop	{r4, r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	08001e74 	.word	0x08001e74
 8001838:	40021000 	.word	0x40021000
 800183c:	007a1200 	.word	0x007a1200
 8001840:	003d0900 	.word	0x003d0900

08001844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <RCC_Delay+0x34>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <RCC_Delay+0x38>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0a5b      	lsrs	r3, r3, #9
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001860:	bf00      	nop
  }
  while (Delay --);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1e5a      	subs	r2, r3, #1
 8001866:	60fa      	str	r2, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f9      	bne.n	8001860 <RCC_Delay+0x1c>
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000008 	.word	0x20000008
 800187c:	10624dd3 	.word	0x10624dd3

08001880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e076      	b.n	8001980 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	2b00      	cmp	r3, #0
 8001898:	d108      	bne.n	80018ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018a2:	d009      	beq.n	80018b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
 80018aa:	e005      	b.n	80018b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d106      	bne.n	80018d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff f854 	bl	8000980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193c:	ea42 0103 	orr.w	r1, r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	0c1a      	lsrs	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f002 0204 	and.w	r2, r2, #4
 800195e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_SPI_Transmit+0x22>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e126      	b.n	8001bf8 <HAL_SPI_Transmit+0x270>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019b2:	f7ff f8cf 	bl	8000b54 <HAL_GetTick>
 80019b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d002      	beq.n	80019ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
 80019ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019cc:	e10b      	b.n	8001be6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HAL_SPI_Transmit+0x52>
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019de:	e102      	b.n	8001be6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2203      	movs	r2, #3
 80019e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	88fa      	ldrh	r2, [r7, #6]
 80019f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	88fa      	ldrh	r2, [r7, #6]
 80019fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a26:	d10f      	bne.n	8001a48 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d007      	beq.n	8001a66 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a6e:	d14b      	bne.n	8001b08 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_SPI_Transmit+0xf6>
 8001a78:	8afb      	ldrh	r3, [r7, #22]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d13e      	bne.n	8001afc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	881a      	ldrh	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	1c9a      	adds	r2, r3, #2
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001aa2:	e02b      	b.n	8001afc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d112      	bne.n	8001ad8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	881a      	ldrh	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	1c9a      	adds	r2, r3, #2
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ad6:	e011      	b.n	8001afc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ad8:	f7ff f83c 	bl	8000b54 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d803      	bhi.n	8001af0 <HAL_SPI_Transmit+0x168>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aee:	d102      	bne.n	8001af6 <HAL_SPI_Transmit+0x16e>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001afa:	e074      	b.n	8001be6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ce      	bne.n	8001aa4 <HAL_SPI_Transmit+0x11c>
 8001b06:	e04c      	b.n	8001ba2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_SPI_Transmit+0x18e>
 8001b10:	8afb      	ldrh	r3, [r7, #22]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d140      	bne.n	8001b98 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	330c      	adds	r3, #12
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b3c:	e02c      	b.n	8001b98 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d113      	bne.n	8001b74 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	330c      	adds	r3, #12
 8001b56:	7812      	ldrb	r2, [r2, #0]
 8001b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b72:	e011      	b.n	8001b98 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b74:	f7fe ffee 	bl	8000b54 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d803      	bhi.n	8001b8c <HAL_SPI_Transmit+0x204>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8a:	d102      	bne.n	8001b92 <HAL_SPI_Transmit+0x20a>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b96:	e026      	b.n	8001be6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1cd      	bne.n	8001b3e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	6839      	ldr	r1, [r7, #0]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f8b2 	bl	8001d10 <SPI_EndRxTxTransaction>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	77fb      	strb	r3, [r7, #31]
 8001be2:	e000      	b.n	8001be6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001be4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c10:	f7fe ffa0 	bl	8000b54 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c20:	f7fe ff98 	bl	8000b54 <HAL_GetTick>
 8001c24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c26:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	0d1b      	lsrs	r3, r3, #20
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c36:	e054      	b.n	8001ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3e:	d050      	beq.n	8001ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c40:	f7fe ff88 	bl	8000b54 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d902      	bls.n	8001c56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d13d      	bne.n	8001cd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c6e:	d111      	bne.n	8001c94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c78:	d004      	beq.n	8001c84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c82:	d107      	bne.n	8001c94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c9c:	d10f      	bne.n	8001cbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e017      	b.n	8001d02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4013      	ands	r3, r2
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d19b      	bne.n	8001c38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008

08001d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff ff6a 	bl	8001c00 <SPI_WaitFlagStateUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e000      	b.n	8001d44 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <__libc_init_array>:
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	2600      	movs	r6, #0
 8001d50:	4d0c      	ldr	r5, [pc, #48]	; (8001d84 <__libc_init_array+0x38>)
 8001d52:	4c0d      	ldr	r4, [pc, #52]	; (8001d88 <__libc_init_array+0x3c>)
 8001d54:	1b64      	subs	r4, r4, r5
 8001d56:	10a4      	asrs	r4, r4, #2
 8001d58:	42a6      	cmp	r6, r4
 8001d5a:	d109      	bne.n	8001d70 <__libc_init_array+0x24>
 8001d5c:	f000 f822 	bl	8001da4 <_init>
 8001d60:	2600      	movs	r6, #0
 8001d62:	4d0a      	ldr	r5, [pc, #40]	; (8001d8c <__libc_init_array+0x40>)
 8001d64:	4c0a      	ldr	r4, [pc, #40]	; (8001d90 <__libc_init_array+0x44>)
 8001d66:	1b64      	subs	r4, r4, r5
 8001d68:	10a4      	asrs	r4, r4, #2
 8001d6a:	42a6      	cmp	r6, r4
 8001d6c:	d105      	bne.n	8001d7a <__libc_init_array+0x2e>
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
 8001d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d74:	4798      	blx	r3
 8001d76:	3601      	adds	r6, #1
 8001d78:	e7ee      	b.n	8001d58 <__libc_init_array+0xc>
 8001d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d7e:	4798      	blx	r3
 8001d80:	3601      	adds	r6, #1
 8001d82:	e7f2      	b.n	8001d6a <__libc_init_array+0x1e>
 8001d84:	0800abf0 	.word	0x0800abf0
 8001d88:	0800abf0 	.word	0x0800abf0
 8001d8c:	0800abf0 	.word	0x0800abf0
 8001d90:	0800abf4 	.word	0x0800abf4

08001d94 <memset>:
 8001d94:	4603      	mov	r3, r0
 8001d96:	4402      	add	r2, r0
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <memset+0xa>
 8001d9c:	4770      	bx	lr
 8001d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001da2:	e7f9      	b.n	8001d98 <memset+0x4>

08001da4 <_init>:
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da6:	bf00      	nop
 8001da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001daa:	bc08      	pop	{r3}
 8001dac:	469e      	mov	lr, r3
 8001dae:	4770      	bx	lr

08001db0 <_fini>:
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db2:	bf00      	nop
 8001db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001db6:	bc08      	pop	{r3}
 8001db8:	469e      	mov	lr, r3
 8001dba:	4770      	bx	lr
